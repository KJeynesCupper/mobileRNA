[{"path":"https://kjeynescupper.github.io/mobileRNA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 mobileRNA authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"plants, systemic signalling elaborated molecular system coordinates plant development, integrating transmitting information perceived environment distant organs.important role long-distance signalling played small RNA molecules (sRNAs). endogenous sRNAs can produced tissue transported systemically across vascular system recipient organs, can induce molecular response coordinate physiological changes. Plant grafting can utilse create chimeric plant systems composed two genotype. example, grafting can join tomato eggplant different species grapevine. Grafting horticultural crops can lead favorable traits, improved plant vigour architecture, resistance stress. sRNAs known move across graft junction, hence, understanding complex regulatory networks controlled sRNAs traveling different genomes assist development novel methods transferring traits crops, alternatives traditional breeding transgenic approaches. Currently, study necessary adapt general RNA sequencing pipelines specific study mobile molecules. Several genomic studies used grafting explore characterise mobile sRNAs chimeric systems, however, clear standardised approach. introduce R Package mobileRNA, aid identification mobile RNA molecules explore population-scale changes chimeric systems comparison non-chimeric control. tool offers workflow pre-processing analysis. Ultimately, pipeline offers optimised mapping/alignment samples genome assemblies improve sRNA origin, offers analysis steps remove mapping errors, visualization results, supports output functional analysis.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"manual offers pipeline analysis sRNAseq data taken chimeric systems. example, plant grafting experiments different cultivars species (distinct genome assemblies). pipeline involves pre-processing analysis steps identification candidate mobile sRNA molecules exploration population level changes chimeric systems. two clear area must optimised make better predicts sRNA mobility population dynamics chimeric systems: * Optimisation alignment steps * Optimisation analysis: sRNA classification mapping error removal. first involves optimising use mapping algorithm best place sRNA genome. , supply mapping algorithms much information possible make predictions. includes supplying genome assemblies time, use merged genome. merged genome single FASTA file containing multiple genome assemblies. many databases, chromosome names consistently named patterns. means merge multiple genome assemblies together challenging distinguish individual genomes merged file. , offer function merge two genome assemblies single file able maintain distinguishability adding distinct pre-fix chromosome names genome. bit extra information supply aligner, list loci sRNA clusters identified sample analysis. ensure consistency across analysis helps prevent false assumptions. first thing understand sRNA molecules expected low abundance. might case one replicate abundance reads given sRNA locus significant enough record sRNA cluster, another replicate recorded. Therefore, wrong assume zero reads loci. Collectively, considering extra information optimise alignment sRNAs bets locations within merged genome. second area optimise analysis R. analysis workflow can completed simple 3-step process identify potentially mobile sRNAs similarly explore population-scale dynamics can achieved simple 4-step process. Across analysis, additional features available advance analysis. includes plotting principal component analysis results, heatmaps distribution plots, well including statistical analysis deployment differential analysis method (edgeR DESeq2), steps assist functional analysis. many core steps, ability remove mapping errors comparing controls treatment. step obviously described workflows adds huge value analysis. Similarly, important core step understand consensus dicer classification (see function RNAdicercall()). given sRNA cluster, replicate mapping clustering pre-processing step predicted class (default: 20-24nt). consensus dicer classification step uses information define classification cluster. range parameters control drawn, making either stringent loose, alter downstream analysis. Finally, step identify candidate mobile molecules (see function RNAmobile()) also parameter can either result stringent looser outcomes. parameter utilses number replicates contributed consensus dicer classification threshold value. instance, stringent select sRNA clusters unambiguously classified across condition replicates. introduce use statistical analysis identify mobile sRNA molecules chimeric systems, emphasized optional step. However, statistical analysis exploration population dynamics mandatory step. include single function can instructed undertake differential analysis using either edgeR DESeq2 method (see function RNAanalysis()). function outputs additional columns working dataset, including raw count mean, log2FoldChange, p-value adjusted p-value.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"workflow-summary","dir":"Articles","previous_headings":"Methods","what":"Workflow Summary","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"summarised workflow shown , begins R-Studio merge two genome assemblies one, pre-processing moves Linux align replicate merged reference back R-Studio undertake analysis identify potentially mobile RNA species.  analysis pipeline, splits two tracks trying identify candidate mobile sRNAs population dynamics. can seen diagram :","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"latest version mobileRNA can installed via GitHub using devtools package: Load package library:","code":"if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"KJeynesCupper/mobileRNA\", ref = \"main\") library(mobileRNA)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"an-overview-of-the-data-used","dir":"Articles","previous_headings":"Installation","what":"An overview of the data used","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"following examples, semi-synthetic small RNA-seq data set utilised simulate movement sRNA molecules Tomato (Solanium lycopersicum) rootstock Eggplant (Solanium melongena) scion, grafting system known compatible. three heterograft replicates: known :heterograft_1, heterograft_2 & heterograft_3 individual tomato replicates spiked 150 tomato sRNA clusters. self-graft replicates: known selfgraft_1, selfgraft_2 & selfgraft_3, individual tomato replicates without spiked tomato sRNA clusters. replicates mirror , instance, heterograft_1 selfgraft_1 replicate, either without spiked clusters. replicates serve aim analyse sRNA mobility. data set, called sRNA_data, stores matrix containing pre-processed data experiment. user, allows see full data set might look like might expect change across analysis. Please data doctored reduce size file. can loaded R workspace using following command: addition, two datasets called “sRNA_data_consensus” “sRNA_data_mobile” utilised function documentations. build “sRNA_data” dataset “sRNA_data_consensus” contains RNA consensus results formed function [RNAdicercall()]. , “sRNA_data_mobile” contains likely mobile sRNAs selected function [RNAmobile()] default parameters.","code":"data(\"sRNA_data\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"data-organisation","dir":"Articles","previous_headings":"Installation","what":"Data organisation","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"two key elements required pipeline analysis: * sRNA-seq sample replicates (.fastq/.fq) * Two reference genomes (.fasta/.fa) one additional element; improve functional analysis: * Reference genome annotations (.gff/.gff3)","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"naming-data-files","dir":"Articles","previous_headings":"Installation > Data organisation","what":"Naming data files","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"recommended rename files names wish represented within analysis shown labels plots. Plus, makes analysis easier! example, instead names : 1: sample_1.fq 2: sample_2.fq 3: sample_3.fq 4: sample_4.fq 5: sample_5.fq 6: sample_6.fq example data set included package, renamed files based condition (treatment control).hetero-grafts, eggplant scion tomato rootstock: 1: heterograft_1.fq 2: heterograft_2.fq 3: heterograft_3.fq eggplant self-grafts: 4: selfgraft_1.fq 5: selfgraft_2.fq 6: selfgraft_3.fq","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"the-reference-genomes-and-annotation-files--fasta-fa","dir":"Articles","previous_headings":"Installation > Data organisation","what":"The reference genomes and annotation files (.fasta/.fa)","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"pipeline designed analyse grafting systems two distinct genomes, tomato eggplant.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"Pre-Processing","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"pre-processing step involves cleaning raw data aligning data merged genome. Going forward, pipeline assumed sRNA-seq samples met quality control standards. recommend installing using ShortStack (https://github.com/MikeAxtell/ShortStack) program aligns samples merged genome undertake cluster analysis. program specifically formulated sRNAseq analysis, utilising Bowtie (Version 1) map samples specifically formulated algorithm cluster sRNAs. , introduce alternative mapping method analysis plant heterograft samples. heterograft system involves two genotypes; two genome references merged single reference samples aligned . mobileRNA offers function merge two FASTA reference genomes one. distinguish reference genomes merged file, important make sure chromosome names genomes different distinguishable. function added particular character string start chromosome name reference genome. standard, string A_ added reference genome supplied genomeA B_ added reference genome supplied genomeB. can customized users preference, see manual information.","code":""},{"path":[]},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"merging-genome-assemblies","dir":"Articles","previous_headings":"Pre-Processing > Pre-mapping","what":"Merging Genome Assemblies","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"merge two reference genomes single merged genome using [mobileRNA::RNAgenomeMerge()] function. default, function changes chromosome names genome ensure distinguishable. , function requires input initials organism’s Latin name. : two genomes use pattern name chromosomes, user able differentiate chromosomes one another merged genome. solves adding letters chromosomes one genomes, example, SM represent Latin name eggplant. chromosome naming pattern contains punctuation, mapping step work. example, Solanum lycopersicum (version 4) genome contains full-stop/period within chromosome name needs removed well. rename chromosomes tomato genome SL chromosomes related eggplant genome (Solanum melongena) SM.","code":"RNAmergeGenomes(genomeA =\"/Users/user1/projectname/workplace/reference/ref1.fa\",                genomeB =\"/Users/user1/projectname/workplace/reference/ref2.fa\",                abbreviationGenomeA = \"SL\",                abbreviationGenomeB = \"SM\",                out_dir = \"/Users/user1/projectname/workplace/reference/merge/                ref_merged.fa\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"merging-genome-annotations","dir":"Articles","previous_headings":"Pre-Processing","what":"Merging Genome Annotations","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"identify associates sRNA clusters genomic features, genomic annotation files (GFF) reference genome must merged way reference genomes . includes following naming patterns chromosomes genome undertaken earlier RNAmergeGenomes() function. undertake similar merging two GFF files, use RNAmergeAnnotations function.","code":"## merge the annotation files into a single annotation file RNAmergeAnnotation(annotationA = \"/Users/user1/projectname/workplace/                    annotation/annotation_1.gff3\",                    annotationB = \"/Users/user1/projectname/workplace/                    annotation/annotation_1.gff3\",                    abbreviationAnnoA = \"SL\",                    abbreviationAnnoB = \"SM\"                   out_dir = \"/Users/user1/projectname/workplace/                   annotation/merge/anno_merged.gff\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"auto-detection-of-srna-cluster","dir":"Articles","previous_headings":"Pre-Processing","what":"Auto-Detection of sRNA Cluster","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"identify build list sRNA clusters within sample assist mapping step later ensure consistency across analysis. step important consider analysis prevents false assumptions. step aligns replicate given genome assembly outputs contains loci sRNA clusters found. Across replicates, difference cluster identified. instance, might case abundance reads given sRNA locus significant enough record sRNA cluster, another replicate recorded. Therefore, wrong assume zero reads loci. , identify potential sRNA cluster loci use information improve mapping. recommend installing ShortStack (https://github.com/MikeAxtell/ShortStack) program detect sRNA clusters align sRNAseq samples.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"step-1---cluster-analysis-with-shortstack","dir":"Articles","previous_headings":"Pre-Processing > Auto-Detection of sRNA Cluster","what":"Step 1 - Cluster analysis with ShortStack","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"","code":"ShortStack \\ --readfile <control_1.fastq> \\ --genomefile <merged_reference.fa> \\ --bowtie_cores 6 \\ --mmap n \\ --mismatches 0 \\ --nohp \\ --outdir <./output/directory>"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"step-2---build-srna-cluster-list","dir":"Articles","previous_headings":"Pre-Processing > Auto-Detection of sRNA Cluster","what":"Step 2 - Build sRNA cluster list","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Now, collate sRNA loci information sample text file.","code":"# location of step 1 output folder <- <./output/directory/from/step/1/>  # name and location to save output file to (must be .txt) save_folder <- <./output/directory/ClustersInfo.txt>  # names of samples (ie. folder names) sample_names <- c(\"<treatment_1>\", \"<treatment_2>\", \"<control_1>\",\"<control_2>\")   loci_info <- RNAloci(files = folder,               out = save_folder,              samples = sample_names)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"mapping","dir":"Articles","previous_headings":"Pre-Processing","what":"Mapping","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"sample mapped merged reference genome list sRNA clusters.","code":"ShortStack \\ --readfile <control_1.fastq> \\ --genomefile <merged_reference.fa> \\ --locifile <./output/directory/ClustersInfo.gff3> \\ --bowtie_cores 6 \\ --mmap n \\ --mismatches 0 \\ --nohp \\ --mincov 5 \\ --outdir <./output/directory/step2/>"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":", analysis pre-processed data occurs, aim identify mobile sRNA molecules traveling one genotype grafting system.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"import-data","dir":"Articles","previous_headings":"Analysis","what":"Import Data","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"pre-processing steps, data cleaned aligned merged reference genome. mapping step, folder sample created stores results . analysis steps requires information stored Results.txt. RNAimport() function imports data folder containing sample folders. function extracts required information, stores matrix. function requires information coordinate importation calculations. requires directory path processed samples; path folder containing individual sample folders stores argument directory. second directory path loci file containing information loci sRNA clusters across analysis, stored argument loci. last pieces information function requires vector containing sample names, treatment control replicates stored argument samples. sample names must match names folders produced mapping, stored directory supplied argument directory.","code":"## Import & organise data. results_dir <-  \"./analysis/alignment_unique_two/\" sample_names <- c(\"heterograft_1\",\"heterograft_2\", \"heterograft_3\",                   \"selfgraft_1\", \"selfgraft_2\", \"selfgraft_3\")   sRNA_data <- RNAimport(input = \"sRNA\",                        directory = results_dir,                            samples = sample_names) # example dataframe  head(sRNA_data) #>                   Locus chr     start       end   Cluster #> 1 1:100000956-100001076   1 100000956 100001076 cluster_1 #> 2 1:100001486-100001554   1 100001486 100001554 cluster_2 #> 3 1:100001646-100001731   1 100001646 100001731 cluster_3 #> 4   1:10001034-10001073   1  10001034  10001073 cluster_4 #> 5 1:100011795-100011930   1 100011795 100011930 cluster_5 #> 6   1:10002000-10002065   1  10002000  10002065 cluster_6 #>   DicerCall_heterograft_1 Count_heterograft_1 RPM_heterograft_1 #> 1                      24                  19             1.908 #> 2                      24                   3             0.301 #> 3                       N                   3             0.301 #> 4                      24                   1             0.100 #> 5                      24                  11             1.105 #> 6                      24                   9             0.904 #>      MajorRNA_heterograft_1 DicerCall_heterograft_2 Count_heterograft_2 #> 1  AGUGACGGUCUCAUGUAACAUAGA                      24                  14 #> 2  AAAGAGUAGACAUAUAUUAAAUGG                      20                   5 #> 3 CUGUCUCAUGUGACACUCUUUCACU                      23                   6 #> 4  AAAUUGUCAUUUAGUCAGAGGAAU                       N                   0 #> 5  AUAGACAAAUCGCACUCGCUCUCG                      24                   2 #> 6  UUAGAUUUCUGGAGUAACAACUUU                       N                   2 #>   RPM_heterograft_2   MajorRNA_heterograft_2 DicerCall_heterograft_3 #> 1             1.803 AGUGACGGUCUCAUGUAACAUAGA                      24 #> 2             0.644     ACAUAUUUUUUUGGACGAAC                      24 #> 3             0.773  UCUGUCUCAUGUGACACUCUUUC                      24 #> 4             0.000                        N                      24 #> 5             0.258 AAGUGUCUACCCAUUGUGAUUCGC                      24 #> 6             0.258      UUAUUGACAAACUAUAACU                      22 #>   Count_heterograft_3 RPM_heterograft_3   MajorRNA_heterograft_3 #> 1                  30             2.953 AGUGACGGUCUCAUGUAACAUAGA #> 2                   1             0.098 UAUGUCUACUCUUUAUUACUCUCC #> 3                  11             1.083 AUCUUGUCAAGUGAAAGAGUGUCA #> 4                  11             1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                   5             0.492 AAUCACAAUGGGUAGACACUUAGA #> 6                   3             0.295 UUAGAUUUCUGGAGUAACAACUUU #>   DicerCall_selfgraft_1 Count_selfgraft_1 RPM_selfgraft_1 #> 1                    24                19           1.909 #> 2                    24                 3           0.301 #> 3                     N                 3           0.301 #> 4                    24                 1           0.100 #> 5                    24                11           1.105 #> 6                    24                 9           0.904 #>        MajorRNA_selfgraft_1 DicerCall_selfgraft_2 Count_selfgraft_2 #> 1  AGUGACGGUCUCAUGUAACAUAGA                    24                14 #> 2  AAAGAGUAGACAUAUAUUAAAUGG                    20                 5 #> 3 CUGUCUCAUGUGACACUCUUUCACU                    23                 6 #> 4  AAAUUGUCAUUUAGUCAGAGGAAU                     N                 0 #> 5  AAUGGGUAGACACUUAGAUACAUG                    24                 2 #> 6  UUAGAUUUCUGGAGUAACAACUUU                     N                 2 #>   RPM_selfgraft_2     MajorRNA_selfgraft_2 DicerCall_selfgraft_3 #> 1           1.804 AGUGACGGUCUCAUGUAACAUAGA                    24 #> 2           0.644     ACAUAUUUUUUUGGACGAAC                    24 #> 3           0.773  UCUGUCUCAUGUGACACUCUUUC                    24 #> 4           0.000                        N                    24 #> 5           0.258 AUAGACAAAUCGCACUCGCUCUCG                    24 #> 6           0.258  AGAUUUCUGGAGUAACAACUUUG                    22 #>   Count_selfgraft_3 RPM_selfgraft_3     MajorRNA_selfgraft_3 #> 1                30           2.954 AGUGACGGUCUCAUGUAACAUAGA #> 2                 1           0.098 UAUGUCUACUCUUUAUUACUCUCC #> 3                11           1.083 AUCUUGUCAAGUGAAAGAGUGUCA #> 4                11           1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                 5           0.492 AAUCACAAUGGGUAGACACUUAGA #> 6                 3           0.295   UUGACAAACUAUAACUUAAAUU"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"sample-level-quality-control","dir":"Articles","previous_headings":"Analysis","what":"Sample-level quality control","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"handy step analysis assess overall similarity sample replicates understand samples similar different, variation introduced data set. well understanding whether data set meets expectations. expected conditions, sample replicates show enough variation suggest replicates different groups. investigate sample similarity/difference, undertake sample-level quality control using three different methods: Distribution RNA classes within sample Principle component analysis (PCA) hierarchical clustering Heatmap show us well samples within condition cluster together, may highlight outliers. Plus, show whether experimental conditions represent main source variation data set. employing unsupervised clustering methods PCA hierarchical clustering Heatmap. involves unbiased log2-transformation counts emphasis sample clustering improve visualization. DESeq2 package contains particularly useful function undertake regularized log transformation (rlog) controls variance across mean, package utilized quality control steps.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"plot-the-distribution-of-rna-classes-within-each-sample","dir":"Articles","previous_headings":"Analysis > Sample-level quality control","what":"Plot the distribution of RNA classes within each sample","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Explore number RNA class identified within sample using RNAdistribution function produces table plots results. results can plotted either bar chart (style = \"bar\") line graph (style = \"line\") sample can shown bar chart facet (facet = TRUE) single line graph, line represents sample (together=TRUE). Alternatively, results can plotted individually sample either format. Lets view plots: example line graph () bar graph (B), show distribution RNA classes within sample. Figure C shows replicates plotted single plot accompanying data.","code":"# plot each replicate as a line, separately, and facet  sample_distribution_line <- RNAdistribution(sRNA_data,                                             style = \"line\",                                             together = FALSE,facet = TRUE)                                                # plot each replicate as a bar, separately, and facet  sample_distribution_bar <- RNAdistribution(sRNA_data,                                            style = \"bar\",                                            facet = TRUE)  # plot each replicate on a single plot sample_distribution <- RNAdistribution(sRNA_data,                                            style = \"line\",                                            together = TRUE) # View plot (only) sample_distribution_line$plot    # View plot (only) sample_distribution_bar$plot  # View plot sample_distribution$plot # View data  sample_distribution$data #>    Class heterograft_1 heterograft_2 heterograft_3 selfgraft_1 selfgraft_2 #> 1:    20             9            14             7           8          13 #> 2:    21            27            28            24          25          26 #> 3:    22            19            27            26          19          27 #> 4:    23            25            38            42          18          31 #> 5:    24           597           491           575         459         353 #>    selfgraft_3 #> 1:           6 #> 2:          22 #> 3:          26 #> 4:          35 #> 5:         437"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"principle-component-analysis-to-assess-sample-distance","dir":"Articles","previous_headings":"Analysis > Sample-level quality control","what":"Principle component analysis to assess sample distance","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Principal Component Analysis (PCA) useful technique illustrate sample distance emphasizes variation reduction dimensions data set. , introduce function plotSamplePCA() example PCA, illustracting sRNA data set sample similarity PCA somewhat expect see real dataset. PC1 showing variation non-spiked spiked version replicate PC2 shows natural variation replicates. real dataset, expect little difference treatment control. much natural variation replicates, unlikely huge distinctive variation samples across conditions. likely small number endogenous mobile sRNAs present heterograft system compared self-graft controls population sRNAs present destination tissue expected largely similar. Although, likely difference due endogenous changes.","code":"group <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",             \"Selfgraft\", \"Selfgraft\", \"Selfgraft\")  plotSamplePCA(sRNA_data, group)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"hierarchical-clustered-heatmap-to-assess-sample-distance","dir":"Articles","previous_headings":"Analysis > Sample-level quality control","what":"Hierarchical clustered heatmap to assess sample distance","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Similarly, PCA plot, plotSampleDistance() function undertakes hierarchical clustering unbiased log transformation calculate sample distance plotted form heatmap. example heatmap,illustracting sRNA data set sample similarity","code":"plotSampleDistance(sRNA_data)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"define-the-consensus-rna-class","dir":"Articles","previous_headings":"Analysis","what":"Define the consensus RNA class","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"look sRNA_data object, see sample class sRNA determined (see columns names starting DicerCall). result either state number 20-24 represents nucleotide length sRNA, , state NA/N represents sRNA unclassified sample. usually discrepancies classification sRNA, therefore, consensus class can assigned based information treatment samples. RNAdicercall() function used compute counting number occurrences classifications sRNA. consensus determined based class counts. working samples chimeric system, function contains specialised parameter utilized. chimeric=TRUE, along id controls parameters. helps optimise classification removal mapping errors. Moreover, user prefer form dicer consensus based results specific samples can specified conditions parameter. function also works remove noise data, default undertaken. user wishes remove noise, set tidy=TRUE promote removal unclassified clusters. downstream analysis, can useful define distinct 24-nt 21/22-nt populations sRNA molecules beginning analysis. Hence, data subset. subset data, use RNAsubset() function choose sRNA populations include: 20-nt, 21-nt, 22-nt, 23-nt, 24-nt. recommended subset data two dataframes: one includes 24-nt sRNA include 21-nt 22-nt sRNAs. instruct RNAsubset() function select specific groups, use type argument.","code":"# define consensus, store as a data summary file. sRNA_data_consensus2 <- RNAdicercall(data = sRNA_data, chimeric = TRUE,                                       genome.ID = \"SL\",                                       controls = c(\"selfgraft_1\",                                                    \"selfgraft_2\",                                                    \"selfgraft_3\"),                                      tidy=TRUE)  head(sRNA_data_consensus) #>                   Locus chr     start       end   Cluster #> 1 1:100000956-100001076   1 100000956 100001076 cluster_1 #> 2 1:100001486-100001554   1 100001486 100001554 cluster_2 #> 4   1:10001034-10001073   1  10001034  10001073 cluster_4 #> 5 1:100011795-100011930   1 100011795 100011930 cluster_5 #> 7   1:10002223-10002449   1  10002223  10002449 cluster_7 #> 8   1:10002531-10002593   1  10002531  10002593 cluster_8 #>   DicerCall_heterograft_1 Count_heterograft_1 RPM_heterograft_1 #> 1                      24                  19             1.908 #> 2                      24                   3             0.301 #> 4                      24                   1             0.100 #> 5                      24                  11             1.105 #> 7                      24                  20             2.009 #> 8                      24                  12             1.205 #>     MajorRNA_heterograft_1 DicerCall_heterograft_2 Count_heterograft_2 #> 1 AGUGACGGUCUCAUGUAACAUAGA                      24                  14 #> 2 AAAGAGUAGACAUAUAUUAAAUGG                      20                   5 #> 4 AAAUUGUCAUUUAGUCAGAGGAAU                       N                   0 #> 5 AUAGACAAAUCGCACUCGCUCUCG                      24                   2 #> 7 AACGUGAAUUCUGAUGAAACCAAU                      24                  12 #> 8 AGGGUAUAUUGGUAUUGGACCAUC                      24                   9 #>   RPM_heterograft_2   MajorRNA_heterograft_2 DicerCall_heterograft_3 #> 1             1.803 AGUGACGGUCUCAUGUAACAUAGA                      24 #> 2             0.644     ACAUAUUUUUUUGGACGAAC                      24 #> 4             0.000                        N                      24 #> 5             0.258 AAGUGUCUACCCAUUGUGAUUCGC                      24 #> 7             1.545 UUAUAACGUGAAUUCUGAUGAAAC                      24 #> 8             1.159 AUAUUGGUAUUGGACCAUCAGAUU                      24 #>   Count_heterograft_3 RPM_heterograft_3   MajorRNA_heterograft_3 #> 1                  30             2.953 AGUGACGGUCUCAUGUAACAUAGA #> 2                   1             0.098 UAUGUCUACUCUUUAUUACUCUCC #> 4                  11             1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                   5             0.492 AAUCACAAUGGGUAGACACUUAGA #> 7                  29             2.855  AUAACGUGAAUUCUGAUGAAACC #> 8                  16             1.575 GGUAUUGGACCAUCAGAUUGACGA #>   DicerCall_selfgraft_1 Count_selfgraft_1 RPM_selfgraft_1 #> 1                    24                19           1.909 #> 2                    24                 3           0.301 #> 4                    24                 1           0.100 #> 5                    24                11           1.105 #> 7                    24                20           2.010 #> 8                    24                12           1.206 #>       MajorRNA_selfgraft_1 DicerCall_selfgraft_2 Count_selfgraft_2 #> 1 AGUGACGGUCUCAUGUAACAUAGA                    24                14 #> 2 AAAGAGUAGACAUAUAUUAAAUGG                    20                 5 #> 4 AAAUUGUCAUUUAGUCAGAGGAAU                     N                 0 #> 5 AAUGGGUAGACACUUAGAUACAUG                    24                 2 #> 7 AACGUGAAUUCUGAUGAAACCAAU                    24                12 #> 8 AGGGUAUAUUGGUAUUGGACCAUC                    24                 9 #>   RPM_selfgraft_2     MajorRNA_selfgraft_2 DicerCall_selfgraft_3 #> 1           1.804 AGUGACGGUCUCAUGUAACAUAGA                    24 #> 2           0.644     ACAUAUUUUUUUGGACGAAC                    24 #> 4           0.000                        N                    24 #> 5           0.258 AUAGACAAAUCGCACUCGCUCUCG                    24 #> 7           1.546 UUAUAACGUGAAUUCUGAUGAAAC                    24 #> 8           1.160 AUAUUGGUAUUGGACCAUCAGAUU                    24 #>   Count_selfgraft_3 RPM_selfgraft_3     MajorRNA_selfgraft_3 DicerCounts #> 1                30           2.954 AGUGACGGUCUCAUGUAACAUAGA           3 #> 2                 1           0.098 UAUGUCUACUCUUUAUUACUCUCC           3 #> 4                11           1.083 AUUCCUCUGACUAAAUGACAAUUU           2 #> 5                 5           0.492 AAUCACAAUGGGUAGACACUUAGA           3 #> 7                29           2.856  AUAACGUGAAUUCUGAUGAAACC           3 #> 8                16           1.576 GGUAUUGGACCAUCAGAUUGACGA           3 #>   DicerConsensus #> 1             24 #> 2             24 #> 4             24 #> 5             24 #> 7             24 #> 8             24  # Subset data for analysis: 24-nt sRNAs sRNA_24 <- RNAsubset(sRNA_data_consensus, type = 24) # Subset data for analysis: 24 21/22-nt sRNAs sRNA_2122 <- RNAsubset(sRNA_data_consensus, type = c(21, 22))"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"plot-consensus-classification-of-srna","dir":"Articles","previous_headings":"Analysis > Define the consensus RNA class","what":"Plot consensus classification of sRNA","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Use RNAdistriution() visualize distribution consensus sRNA classes within data. step can used quality control step illustrate distribution sRNA class within data. function can plot absolute relative frequency, use argument relative. can beneficial view absolute frequency well relative observe whether data meets expectations.","code":"consensus_plot <- RNAdistribution(data = sRNA_data_consensus,                                   consensus = TRUE,                                    style = \"consensus\") # view  consensus_plot$plot consensus_plot$data #>   DicerConsensus   n #> 1             20   5 #> 2             21  20 #> 3             22  14 #> 4             23  19 #> 5             24 601"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"differential-expression-analysis-with-deseq2-or-edger","dir":"Articles","previous_headings":"Analysis","what":"Differential Expression analysis with DESeq2 or edgeR","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Differential expression (DE) analysis undertaken identify sRNA statistically significant discover quantitative changes expression levels treatment (hetero-grafting) control (self-grafting) groups. technique can undertaken variety tools, mobileRNA users option use DESeq2 edgeR analytical method. Although methods produce different results, typically case step isolate mobile molecules, results produce. meant , mobile molecules typically identified end analysis regardless analytical method. However, particular case, one method preferred . instance, DESeq2 method appropriate experiment contain replicate (ie. one sample replicate per condition). hand, edgeR can used. , included recommend practice edgeR data set contain replicates. option can employed setting custom dispersion value, see argument dispersionValue. Please note step optional required part analysis.","code":"# sample conditions in order within dataframe groups <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",             \"Selfgraft\", \"Selfgraft\", \"Selfgraft\")  ## Differential analysis of whole dataset: DEseq2 method  sRNA_DESeq2 <- RNAanalysis(data = sRNA_data_consensus,                               group = groups,                               method = \"DESeq2\" )  ## Differential analysis: DEseq2 method # 24-nt sRNA data-set sRNA_24_DESeq2 <- RNAanalysis(data = sRNA_24,                               group = groups,                               method = \"DESeq2\" ) # 2122-nt sRNA data-set sRNA_2122_DESeq2 <- RNAanalysis(data = sRNA_2122,                                 group = groups,                                 method = \"DESeq2\" )   ## Differential analysis of whole dataset: edgeR method  sRNA_edgeR <- RNAanalysis(data = sRNA_data_consensus,                               group = groups,                               method = \"edgeR\" ) #> Design matrix not provided. Switch to the classic mode.   ## Differential analysis: edgeR method sRNA_24_edgeR <- RNAanalysis(data = sRNA_24,                              group = groups,                              method = \"edgeR\" ) #> Design matrix not provided. Switch to the classic mode.  sRNA_2122_edgeR <- RNAanalysis(data = sRNA_2122 ,                                group = groups,                                method = \"edgeR\" ) #> Design matrix not provided. Switch to the classic mode.  # view example output: head(sRNA_edgeR) #>                   Locus chr     start       end   Cluster #> 1 1:100000956-100001076   1 100000956 100001076 cluster_1 #> 2 1:100001486-100001554   1 100001486 100001554 cluster_2 #> 4   1:10001034-10001073   1  10001034  10001073 cluster_4 #> 5 1:100011795-100011930   1 100011795 100011930 cluster_5 #> 7   1:10002223-10002449   1  10002223  10002449 cluster_7 #> 8   1:10002531-10002593   1  10002531  10002593 cluster_8 #>   DicerCall_heterograft_1 Count_heterograft_1 RPM_heterograft_1 #> 1                      24                  19             1.908 #> 2                      24                   3             0.301 #> 4                      24                   1             0.100 #> 5                      24                  11             1.105 #> 7                      24                  20             2.009 #> 8                      24                  12             1.205 #>     MajorRNA_heterograft_1 DicerCall_heterograft_2 Count_heterograft_2 #> 1 AGUGACGGUCUCAUGUAACAUAGA                      24                  14 #> 2 AAAGAGUAGACAUAUAUUAAAUGG                      20                   5 #> 4 AAAUUGUCAUUUAGUCAGAGGAAU                       N                   0 #> 5 AUAGACAAAUCGCACUCGCUCUCG                      24                   2 #> 7 AACGUGAAUUCUGAUGAAACCAAU                      24                  12 #> 8 AGGGUAUAUUGGUAUUGGACCAUC                      24                   9 #>   RPM_heterograft_2   MajorRNA_heterograft_2 DicerCall_heterograft_3 #> 1             1.803 AGUGACGGUCUCAUGUAACAUAGA                      24 #> 2             0.644     ACAUAUUUUUUUGGACGAAC                      24 #> 4             0.000                        N                      24 #> 5             0.258 AAGUGUCUACCCAUUGUGAUUCGC                      24 #> 7             1.545 UUAUAACGUGAAUUCUGAUGAAAC                      24 #> 8             1.159 AUAUUGGUAUUGGACCAUCAGAUU                      24 #>   Count_heterograft_3 RPM_heterograft_3   MajorRNA_heterograft_3 #> 1                  30             2.953 AGUGACGGUCUCAUGUAACAUAGA #> 2                   1             0.098 UAUGUCUACUCUUUAUUACUCUCC #> 4                  11             1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                   5             0.492 AAUCACAAUGGGUAGACACUUAGA #> 7                  29             2.855  AUAACGUGAAUUCUGAUGAAACC #> 8                  16             1.575 GGUAUUGGACCAUCAGAUUGACGA #>   DicerCall_selfgraft_1 Count_selfgraft_1 RPM_selfgraft_1 #> 1                    24                19           1.909 #> 2                    24                 3           0.301 #> 4                    24                 1           0.100 #> 5                    24                11           1.105 #> 7                    24                20           2.010 #> 8                    24                12           1.206 #>       MajorRNA_selfgraft_1 DicerCall_selfgraft_2 Count_selfgraft_2 #> 1 AGUGACGGUCUCAUGUAACAUAGA                    24                14 #> 2 AAAGAGUAGACAUAUAUUAAAUGG                    20                 5 #> 4 AAAUUGUCAUUUAGUCAGAGGAAU                     N                 0 #> 5 AAUGGGUAGACACUUAGAUACAUG                    24                 2 #> 7 AACGUGAAUUCUGAUGAAACCAAU                    24                12 #> 8 AGGGUAUAUUGGUAUUGGACCAUC                    24                 9 #>   RPM_selfgraft_2     MajorRNA_selfgraft_2 DicerCall_selfgraft_3 #> 1           1.804 AGUGACGGUCUCAUGUAACAUAGA                    24 #> 2           0.644     ACAUAUUUUUUUGGACGAAC                    24 #> 4           0.000                        N                    24 #> 5           0.258 AUAGACAAAUCGCACUCGCUCUCG                    24 #> 7           1.546 UUAUAACGUGAAUUCUGAUGAAAC                    24 #> 8           1.160 AUAUUGGUAUUGGACCAUCAGAUU                    24 #>   Count_selfgraft_3 RPM_selfgraft_3     MajorRNA_selfgraft_3 DicerCounts #> 1                30           2.954 AGUGACGGUCUCAUGUAACAUAGA           3 #> 2                 1           0.098 UAUGUCUACUCUUUAUUACUCUCC           3 #> 4                11           1.083 AUUCCUCUGACUAAAUGACAAUUU           2 #> 5                 5           0.492 AAUCACAAUGGGUAGACACUUAGA           3 #> 7                29           2.856  AUAACGUGAAUUCUGAUGAAACC           3 #> 8                16           1.576 GGUAUUGGACCAUCAGAUUGACGA           3 #>   DicerConsensus CountMean log2FoldChange    pvalue padjusted    logCPM #> 1             24  21.00000     0.09399726 0.7992536         1 10.819068 #> 2             24   3.00000     0.20765865 0.8863680         1  8.661401 #> 4             24   4.00000     0.01104373 1.0000000         1  8.831677 #> 5             24   6.00000     0.07211172 1.0000000         1  9.271215 #> 7             24  20.33333     0.08714351 0.8448235         1 10.763685 #> 8             24  12.33333     0.09474876 0.8602119         1 10.144466"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"identify-the-mobile-molecules","dir":"Articles","previous_headings":"Analysis","what":"Identify the mobile molecules","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"essential remove noise data isolate potential mobile molecules include falsely mapped clusters , case, clusters map scion genotype aim identify molecules traveling rootstock. data, aim explore whether tomato sRNA traveling graft junction exiting eggplant leaf tissues. can identify potential mobile molecule using RNAmobile() function. selects clusters mapping rootstock genome hetero-graft. Therefore, remove clusters mapped chromosome genotype used self-graft controls. example, tomato genome chromosome labeled “SL40” whilst eggplant genome labels. remove clusters associated eggplant genome keep clusters associated tomato genome, set \"task\" argument \"keep\". RNAmobile() function can take account statistically significance. set consider , function filter sRNA based adjusted p-value threshold = 0.05. threshold can changed make less stringent using argument padj.Similarly, prefer extract mobile RNA based p-value,rather adjusted p-values, numeric threshold can set argument p.value. default, function consider statistical values properties sRNAs. consider, use statistical=TRUE used datasets contains additional columns statistical values. stated , need use statistical values identify mobile molecules can explored utilised plot heatmap based logFC.","code":"# vector of control names control_names <- c(\"selfgraft_1\", \"selfgraft_2\", \"selfgraft_3\")   ## Identify potential tomato mobile molecules, before subsetting classes mobile_sRNA <- RNAmobile(data = sRNA_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\",                           statistical = FALSE)  # or identify within specific classes  # within 24-nt sRNA datset  mobile_sRNA_24 <- RNAmobile(data = sRNA_24_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\") # within 21/22-nt sRNA datset mobile_sRNA_2122 <- RNAmobile(data = sRNA_2122_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\")   # If you wish to consider the statistical values from DESeq2 analysis   mobile_sRNA_sig24 <- RNAmobile(data = sRNA_24_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\",                           statistical = TRUE)  mobile_sRNA_sig2122 <- RNAmobile(data = sRNA_2122_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\",                           statistical = TRUE)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"heatmap-plots-to-represent-mobile-molecules","dir":"Articles","previous_headings":"Analysis > Identify the mobile molecules","what":"Heatmap plots to represent mobile molecules","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"can use hierarchical clustering heatmap analysis potential statistically significant mobile sRNAs identified. expected log2 fold changes opposite treatment controls treatment samples shows -regulation control samples show -regulation.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"mobile-molecules-from-the-24-nt-srna-dataset","dir":"Articles","previous_headings":"Analysis > Identify the mobile molecules","what":"Mobile molecules from the 24-nt sRNA dataset","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"example heatmap potential mobile RNA molecules Identifed DESeq2 method Class 24-nt sRNAs (left) Class 21/22-nt sRNAs (right). rows represents sRNA cluster number columns represents replicates.","code":"p10 <- plotHeatmap(mobile_sRNA_sig24) p11 <- plotHeatmap(mobile_sRNA_sig2122)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"save-output","dir":"Articles","previous_headings":"Analysis > Identify the mobile molecules","what":"Save output","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"","code":"write.table(mobile_sRNA, \"./output.txt\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"functional-analysis","dir":"Articles","previous_headings":"Analysis","what":"Functional Analysis","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"now retrieved list potentially mobile sRNA molecules want identify whether play role biological system. Small interfering RNAs (siRNAs) length 24-nucleotides, known play role RNA-directed DNA methylation pathway via targeting complementary sequencing DNA. , miRNAs length 21/22-nucleotides, known instigate post-transcriptional gene silencing via mRNA degradation repression translation. predict function mobile sRNA destination tissues, can overlap information genome annotation origin tissue determine local functionality. well , retrieving nucleotide sequence abundant sRNA within cluster locating complementary sequences genome origin genome destination using BLAST. different datatypes, example RNAseq BSseq, want overlap data might interesting see whether complementary DNA sequences promoter regions deferentially expressed genes interest identified potential mobile sRNAs. Moreover, theory, regions also show differential methylation potential indication molecular pathway. IMPORTANT: chromosome names altered either genome assemblies used mapping steps, chromosome names genome annotation files must match pattern. used [mobileRNA::RNAmergeGenomes()] function, chromosome names default altered. [mobileRNA::RNAmergeAnnotations()] function can utilsed alter genome annotation files way. functions alters names, saves altered genome annotation merges one.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"add-genomic-attributes-to-srna-clusters","dir":"Articles","previous_headings":"Analysis > Functional Analysis","what":"Add genomic attributes to sRNA clusters","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"sRNA cluster contains coordinates, can matches coordinates annotation file. match, function returns input data additional fields, sRNA cluster receive information : source : name program generated feature, data source (database project name) feature : feature type name, e.g. Gene, Variation, Similarity score : floating point value strand : defined + (forward) - (reverse) frame : One ‘0’, ‘1’ ‘2’. ‘0’ indicates first base feature first base codon, ‘1’ second base first base codon, attribute : semicolon-separated list tag-value pairs, providing additional information feature. Using genomic locations mobile sRNA clusters, can identify overlaps genome annotation origin tissue predict implication mobile sRNA. function can utilsed beginning analysis steps sRNA clusters genotypes can annotated genomic attributes associated location. can completed single step using merge annotation file using function [mobileRNA::RNAmergeAnnotations()].","code":"mobile_df_attributes <- RNAattributes(data = mobile_sRNA,                             annotation = \"./annotation/origin_annotation.gff3\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"summarise-overlaps-with-genomic-features","dir":"Articles","previous_headings":"Analysis > Functional Analysis","what":"Summarise overlaps with genomic features","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"can also locate specific genomic features overlap sRNA cluster locus including promoter regions, exon, introns, untranslated regions repeat regions.results can either displayed matrix absolute value percentage total: NOTE: function look exact matches locus (chromosome, start end regions) sRNA cluster annotation file. distribution sRNA clusters across genomic features strongly related class sRNA based nucleotide length. expected 24-nt sRNA associated repeat regions promoter regions, 21/22-nt sRNA likely associated coding sequence. resulting dataframe can passed plot choice. Similarly, features can utilsed across different data sets. example, across total data set specific mobile sRNA subsets.","code":"mobile_df_features <- RNAfeatures(data = mobile_sRNA,                             annotation = \"./annotation/origin_annotation.gff3\",                        repeats = \"./annotation/origin_annotation_repeats.gff3\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"retrieve-srna-sequence-complementary-sequences","dir":"Articles","previous_headings":"Analysis > Functional Analysis","what":"Retrieve sRNA sequence & complementary sequences","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Lastly, lets extract sRNA cluster sequences.can utilised BLAST, plant sRNA target prediction tools TargetFinder (https://github.com/carringtonlab/TargetFinder) overlapped mRNAseq data identify complementary sequences elucidate potential function sRNAs. RNAsequences function identifies whether abundant sRNA consistent across replicates, , extracts sRNA nucleotide sequence calculates RNA DNA complementary sequences, well stating length sequence.","code":"mobile_sequences <- RNAsequences(mobile_sRNA) #> The minimum number of matches required to form a consensus sRNA sequence is... 1 #> The consensus sRNA sequences will be choose at random in the case of a tie  head(mobile_sequences) #>             Cluster Match                 Sequence Width #> 1610 cluster_133430    No                     <NA>  <NA> #> 2010 cluster_133435   Yes AUGUAACUGAUUGAGUAUAUAUUU    24 #> 2410 cluster_133450   Yes  CCCGGACUGUCGGACACUACACA    23 #> 2510 cluster_133451   Yes  ACGGCCUAUUGCACACCUGAAUU    23 #> 2610 cluster_133452   Yes AGGAUUACUUACCACUCCACCAUA    24 #> 2810 cluster_133455   Yes ACACUUGUAGGUCUGAGUGAAACU    24 #>             Complementary_RNA        Complementary_DNA #> 1610                       NA                       NA #> 2010 UACAUUGACUAACUCAUAUAUAAA TACATTGACTAACTCATATATAAA #> 2410  GGGCCUGACAGCCUGUGAUGUGU  GGGCCTGACAGCCTGTGATGTGT #> 2510  UGCCGGAUAACGUGUGGACUUAA  TGCCGGATAACGTGTGGACTTAA #> 2610 UCCUAAUGAAUGGUGAGGUGGUAU TCCTAATGAATGGTGAGGTGGTAT #> 2810 UGUGAACAUCCAGACUCACUUUGA TGTGAACATCCAGACTCACTTTGA"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"explore-population-scale-srna-difference","dir":"Articles","previous_headings":"Analysis","what":"Explore population-scale sRNA difference","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":", look comparing native population sRNAs might changes leaf due chimeric system compared control. reminder, data used yield results treatment control samples contain exact population eggplant sRNAs, difference treatment samples spiked tomato sRNA clusters. already undertaken statistical analysis previous steps, utilising dataset going forward.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"srna-abundance","dir":"Articles","previous_headings":"Analysis > Explore population-scale sRNA difference","what":"sRNA abundance","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"comparing treatment control conditions, might case sRNA clusters found within yet difference total abundance shared clusters. instance, given sRNA cluster samples treatment condition might greater abundance samples control condition. difference attribute observed differences. statistical analysis calculated log2FC values sRNA cluster comparing normalised counts treatment control. , positive log2FC indicates increased abundance transcripts given sRNA cluster treatment compared control, negative log2FC indicates decreased abundance transcripts given sRNA cluster. statistical significance log2FC determined (adjusted) pvalue also calculated previous step. filter data select sRNA clusters statistically significant, plot results heatmap compare conditions. Lets look plot:","code":"# select only significant sRNAs significant_sRNAs <- RNAsignificant(sRNA_edgeR)   #plot p1 <- plotHeatmap(significant_sRNAs) p1$plot"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"step-6-identify-absolute-srna-population-difference","dir":"Articles","previous_headings":"Analysis","what":"Step 6: Identify absolute sRNA population difference","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Finally, RNApopulation() function can utilised identify unique sRNA populations found treatment control condition. First lets look sRNA clusters unique treatment condition. chimeric heterografts, expect foreign sRNAs also selected pick-, therefore, can use parameter genome.ID remove sRNA cluster related foreign genome. Now, sRNA clusters unique control condition:  plotting functions within package can used display results, specifically RNAdistribution() plotHeatmap(). Similarly, functions assist functional analysis can also utilsied pull consensus sRNA sequence cluster population, find overlaps known annotations native genome.","code":"# select sRNA clusters only found in treatment & not in the control samples treatment_reps <- c(\"heterograft_1\", \"heterograft_2\" , \"heterograft_3\") unique_treatment <- RNApopulation(data = sRNA_data_consensus,                                     conditions = treatment_reps)  # look at number of sRNA cluster only found in treatment  nrow(unique_treatment) # select sRNA clusters only found in control & not in the treatment samples control_reps <- c(\"selfgraft_1\", \"selfgraft_2\" , \"selfgraft_3\") unique_control <- RNApopulation(data = sRNA_data_consensus,                                     conditions = control_reps) # look at number of sRNA cluster only found in control   nrow(unique_control)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"additional-features","dir":"Articles","previous_headings":"","what":"Additional features","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"mobileRNA package offers several optional extra-helpful functions aid analysis. includes function calculate mean RPM counts across specific samples also calculate overlap genomic features sRNA clusters.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"calculate-rpm-and-count-means-for-specific-samples","dir":"Articles","previous_headings":"Additional features","what":"Calculate RPM and Count means for specific samples","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"function calculates RPM mean Count mean across specific samples.output calculation added additional column input dataframe. can manipulated used identified mobile RNAs. calculating means identifying mobile molecules, recommend base heterograft samples rather full dataset (selfgrafts + heterograft replicates) potential mobile sRNAs zero counts RPM value selfgraft control replicates. including full dataset calculations, mean values mobile molecules skewed. Therefore, depending intended output function approached multiple ways.","code":"# calculate mean RPM and mean Counts for heterograft samples selected_samples <- c(\"heterograft_1\", \"heterograft_2\", \"heterograft_3\") means <- RNAmean(data = sRNA_data_consensus, conditions = selected_samples)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"","code":"sessionInfo() #> R version 4.0.2 (2020-06-22) #> Platform: x86_64-apple-darwin17.0 (64-bit) #> Running under: macOS  10.16 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8 #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] mobileRNA_0.99.0 BiocStyle_2.16.1 #>  #> loaded via a namespace (and not attached): #>   [1] colorspace_2.0-3            rprojroot_2.0.2             #>   [3] DNAcopy_1.62.0              XVector_0.28.0              #>   [5] GenomicRanges_1.40.0        fs_1.5.2                    #>   [7] rstudioapi_0.14             farver_2.1.0                #>   [9] listenv_0.8.0               audio_0.1-10                #>  [11] affyio_1.58.0               ggrepel_0.9.1               #>  [13] bit64_4.0.5                 AnnotationDbi_1.50.3        #>  [15] fansi_1.0.2                 codetools_0.2-18            #>  [17] splines_4.0.2               Repitools_1.34.0            #>  [19] doParallel_1.0.17           cachem_1.0.6                #>  [21] geneplotter_1.66.0          knitr_1.42                  #>  [23] jsonlite_1.8.4              Rsamtools_2.4.0             #>  [25] annotate_1.66.0             cluster_2.1.2               #>  [27] vsn_3.56.0                  png_0.1-7                   #>  [29] pheatmap_1.0.12             BiocManager_1.30.16         #>  [31] compiler_4.0.2              Matrix_1.4-0                #>  [33] fastmap_1.1.0               limma_3.44.3                #>  [35] cli_3.6.0                   beepr_1.3                   #>  [37] htmltools_0.5.5             tools_4.0.2                 #>  [39] gtable_0.3.0                glue_1.6.2                  #>  [41] GenomeInfoDbData_1.2.3      affy_1.66.0                 #>  [43] dplyr_1.1.2                 Rcpp_1.0.8.3                #>  [45] Biobase_2.48.0              jquerylib_0.1.4             #>  [47] pkgdown_2.0.7               vctrs_0.6.2                 #>  [49] Biostrings_2.56.0           preprocessCore_1.50.0       #>  [51] progressr_0.10.0            rtracklayer_1.48.0          #>  [53] iterators_1.0.14            xfun_0.37                   #>  [55] stringr_1.5.0               globals_0.14.0              #>  [57] lifecycle_1.0.3             gtools_3.9.2                #>  [59] XML_3.99-0.9                future_1.24.0               #>  [61] edgeR_3.30.3                zlibbioc_1.34.0             #>  [63] MASS_7.3-55                 scales_1.2.1                #>  [65] BSgenome_1.56.0             ragg_1.2.2                  #>  [67] parallel_4.0.2              SummarizedExperiment_1.18.2 #>  [69] RColorBrewer_1.1-2          curl_4.3.2                  #>  [71] yaml_2.3.5                  pbapply_1.7-0               #>  [73] memoise_2.0.1               ggplot2_3.4.2               #>  [75] sass_0.4.0                  stringi_1.7.6               #>  [77] RSQLite_2.2.10              highr_0.9                   #>  [79] genefilter_1.70.0           S4Vectors_0.26.1            #>  [81] desc_1.4.1                  foreach_1.5.2               #>  [83] Ringo_1.52.0                caTools_1.18.2              #>  [85] BiocGenerics_0.34.0         BiocParallel_1.22.0         #>  [87] truncnorm_1.0-8             GenomeInfoDb_1.24.2         #>  [89] rlang_1.1.0                 pkgconfig_2.0.3             #>  [91] systemfonts_1.0.4           matrixStats_0.61.0          #>  [93] bitops_1.0-7                Rsolnp_1.16                 #>  [95] evaluate_0.15               lattice_0.20-45             #>  [97] purrr_1.0.1                 labeling_0.4.2              #>  [99] GenomicAlignments_1.24.0    bit_4.0.4                   #> [101] tidyselect_1.2.0            parallelly_1.30.0           #> [103] magrittr_2.0.3              bookdown_0.32               #> [105] DESeq2_1.28.1               R6_2.5.1                    #> [107] IRanges_2.22.2              gplots_3.1.1                #> [109] generics_0.1.2              DelayedArray_0.14.1         #> [111] DBI_1.1.2                   withr_2.5.0                 #> [113] pillar_1.9.0                gsmoothr_0.1.7              #> [115] RPushbullet_0.3.4           survival_3.3-1              #> [117] RCurl_1.98-1.6              future.apply_1.8.1          #> [119] tibble_3.2.1                crayon_1.5.0                #> [121] KernSmooth_2.23-20          utf8_1.2.2                  #> [123] rmarkdown_2.20              locfit_1.5-9.4              #> [125] grid_4.0.2                  data.table_1.14.2           #> [127] blob_1.2.2                  SimDesign_2.10.1            #> [129] digest_0.6.29               xtable_1.8-4                #> [131] tidyr_1.3.0                 textshaping_0.3.6           #> [133] stats4_4.0.2                munsell_0.5.0               #> [135] bslib_0.3.1                 sessioninfo_1.2.2"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"plants, systemic signalling elaborated molecular system coordinates plant development, integrating transmitting information perceived environment distant organs.important role long-distance signalling played small RNA molecules (sRNAs). endogenous sRNAs can produced tissue transported systemically across vascular system recipient organs, can induce molecular response coordinate physiological changes. Plant grafting can utilse create chimeric plant systems composed two genotype. example, grafting can join tomato eggplant different species grapevine. Grafting horticultural crops can lead favorable traits, improved plant vigour architecture, resistance stress. sRNAs known move across graft junction, hence, understanding complex regulatory networks controlled sRNAs traveling different genomes assist development novel methods transferring traits crops, alternatives traditional breeding transgenic approaches. Currently, study necessary adapt general RNA sequencing pipelines specific study mobile molecules. Several genomic studies used grafting explore characterise mobile sRNAs chimeric systems, however, clear standardised approach. introduce R Package mobileRNA, aid identification mobile RNA molecules explore population-scale changes chimeric systems comparison non-chimeric control. tool offers workflow pre-processing analysis. Ultimately, pipeline offers optimised mapping/alignment samples genome assemblies improve sRNA origin, offers analysis steps remove mapping errors, visualization results, supports output functional analysis.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"manual offers pipeline analysis sRNAseq data taken chimeric systems. example, plant grafting experiments different cultivars species (distinct genome assemblies). pipeline involves pre-processing analysis steps identification candidate mobile sRNA molecules exploration population level changes chimeric systems. two clear area must optimised make better predicts sRNA mobility population dynamics chimeric systems: * Optimisation alignment steps * Optimisation analysis: sRNA classification mapping error removal. first involves optimising use mapping algorithm best place sRNA genome. , supply mapping algorithms much information possible make predictions. includes supplying genome assemblies time, use merged genome. merged genome single FASTA file containing multiple genome assemblies. many databases, chromosome names consistently named patterns. means merge multiple genome assemblies together challenging distinguish individual genomes merged file. , offer function merge two genome assemblies single file able maintain distinguishability adding distinct pre-fix chromosome names genome. bit extra information supply aligner, list loci sRNA clusters identified sample analysis. ensure consistency across analysis helps prevent false assumptions. first thing understand sRNA molecules expected low abundance. might case one replicate abundance reads given sRNA locus significant enough record sRNA cluster, another replicate recorded. Therefore, wrong assume zero reads loci. Collectively, considering extra information optimise alignment sRNAs bets locations within merged genome. second area optimise analysis R. analysis workflow can completed simple 3-step process identify potentially mobile sRNAs similarly explore population-scale dynamics can achieved simple 4-step process. Across analysis, additional features available advance analysis. includes plotting principal component analysis results, heatmaps distribution plots, well including statistical analysis deployment differential analysis method (edgeR DESeq2), steps assist functional analysis. many core steps, ability remove mapping errors comparing controls treatment. step obviously described workflows adds huge value analysis. Similarly, important core step understand consensus dicer classification (see function RNAdicercall()). given sRNA cluster, replicate mapping clustering pre-processing step predicted class (default: 20-24nt). consensus dicer classification step uses information define classification cluster. range parameters control drawn, making either stringent loose, alter downstream analysis. Finally, step identify candidate mobile molecules (see function RNAmobile()) also parameter can either result stringent looser outcomes. parameter utilses number replicates contributed consensus dicer classification threshold value. instance, stringent select sRNA clusters unambiguously classified across condition replicates. introduce use statistical analysis identify mobile sRNA molecules chimeric systems, emphasized optional step. However, statistical analysis exploration population dynamics mandatory step. include single function can instructed undertake differential analysis using either edgeR DESeq2 method (see function RNAanalysis()). function outputs additional columns working dataset, including raw count mean, log2FoldChange, p-value adjusted p-value.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"workflow-summary","dir":"Articles","previous_headings":"Methods","what":"Workflow Summary","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"summarised workflow shown , begins R-Studio merge two genome assemblies one, pre-processing moves Linux align replicate merged reference back R-Studio undertake analysis identify potentially mobile RNA species.  analysis pipeline, splits two tracks trying identify candidate mobile sRNAs population dynamics. can seen diagram :","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"latest version mobileRNA can installed via GitHub using devtools package: Load package library:","code":"if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"KJeynesCupper/mobileRNA\", ref = \"main\") library(mobileRNA)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"an-overview-of-the-data-used","dir":"Articles","previous_headings":"Installation","what":"An overview of the data used","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"following examples, semi-synthetic small RNA-seq data set utilised simulate movement sRNA molecules Tomato (Solanium lycopersicum) rootstock Eggplant (Solanium melongena) scion, grafting system known compatible. three heterograft replicates: known :heterograft_1, heterograft_2 & heterograft_3 individual tomato replicates spiked 150 tomato sRNA clusters. self-graft replicates: known selfgraft_1, selfgraft_2 & selfgraft_3, individual tomato replicates without spiked tomato sRNA clusters. replicates mirror , instance, heterograft_1 selfgraft_1 replicate, either without spiked clusters. replicates serve aim analyse sRNA mobility. data set, called sRNA_data, stores matrix containing pre-processed data experiment. user, allows see full data set might look like might expect change across analysis. Please data doctored reduce size file. can loaded R workspace using following command: addition, two datasets called “sRNA_data_consensus” “sRNA_data_mobile” utilised function documentations. build “sRNA_data” dataset “sRNA_data_consensus” contains RNA consensus results formed function [RNAdicercall()]. , “sRNA_data_mobile” contains likely mobile sRNAs selected function [RNAmobile()] default parameters.","code":"data(\"sRNA_data\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"data-organisation","dir":"Articles","previous_headings":"Installation","what":"Data organisation","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"two key elements required pipeline analysis: * sRNA-seq sample replicates (.fastq/.fq) * Two reference genomes (.fasta/.fa) one additional element; improve functional analysis: * Reference genome annotations (.gff/.gff3)","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"naming-data-files","dir":"Articles","previous_headings":"Installation > Data organisation","what":"Naming data files","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"recommended rename files names wish represented within analysis shown labels plots. Plus, makes analysis easier! example, instead names : 1: sample_1.fq 2: sample_2.fq 3: sample_3.fq 4: sample_4.fq 5: sample_5.fq 6: sample_6.fq example data set included package, renamed files based condition (treatment control).hetero-grafts, eggplant scion tomato rootstock: 1: heterograft_1.fq 2: heterograft_2.fq 3: heterograft_3.fq eggplant self-grafts: 4: selfgraft_1.fq 5: selfgraft_2.fq 6: selfgraft_3.fq","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"the-reference-genomes-and-annotation-files--fasta-fa","dir":"Articles","previous_headings":"Installation > Data organisation","what":"The reference genomes and annotation files (.fasta/.fa)","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"pipeline designed analyse grafting systems two distinct genomes, tomato eggplant.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"Pre-Processing","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"pre-processing step involves cleaning raw data aligning data merged genome. Going forward, pipeline assumed sRNA-seq samples met quality control standards. recommend installing using ShortStack (https://github.com/MikeAxtell/ShortStack) program aligns samples merged genome undertake cluster analysis. program specifically formulated sRNAseq analysis, utilising Bowtie (Version 1) map samples specifically formulated algorithm cluster sRNAs. , introduce alternative mapping method analysis plant heterograft samples. heterograft system involves two genotypes; two genome references merged single reference samples aligned . mobileRNA offers function merge two FASTA reference genomes one. distinguish reference genomes merged file, important make sure chromosome names genomes different distinguishable. function added particular character string start chromosome name reference genome. standard, string A_ added reference genome supplied genomeA B_ added reference genome supplied genomeB. can customized users preference, see manual information.","code":""},{"path":[]},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"merging-genome-assemblies","dir":"Articles","previous_headings":"Pre-Processing > Pre-mapping","what":"Merging Genome Assemblies","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"merge two reference genomes single merged genome using [mobileRNA::RNAgenomeMerge()] function. default, function changes chromosome names genome ensure distinguishable. , function requires input initials organism’s Latin name. : two genomes use pattern name chromosomes, user able differentiate chromosomes one another merged genome. solves adding letters chromosomes one genomes, example, SM represent Latin name eggplant. chromosome naming pattern contains punctuation, mapping step work. example, Solanum lycopersicum (version 4) genome contains full-stop/period within chromosome name needs removed well. rename chromosomes tomato genome SL chromosomes related eggplant genome (Solanum melongena) SM.","code":"RNAmergeGenomes(genomeA =\"/Users/user1/projectname/workplace/reference/ref1.fa\",                genomeB =\"/Users/user1/projectname/workplace/reference/ref2.fa\",                abbreviationGenomeA = \"SL\",                abbreviationGenomeB = \"SM\",                out_dir = \"/Users/user1/projectname/workplace/reference/merge/                ref_merged.fa\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"merging-genome-annotations","dir":"Articles","previous_headings":"Pre-Processing","what":"Merging Genome Annotations","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"identify associates sRNA clusters genomic features, genomic annotation files (GFF) reference genome must merged way reference genomes . includes following naming patterns chromosomes genome undertaken earlier RNAmergeGenomes() function. undertake similar merging two GFF files, use RNAmergeAnnotations function.","code":"## merge the annotation files into a single annotation file RNAmergeAnnotation(annotationA = \"/Users/user1/projectname/workplace/                    annotation/annotation_1.gff3\",                    annotationB = \"/Users/user1/projectname/workplace/                    annotation/annotation_1.gff3\",                    abbreviationAnnoA = \"SL\",                    abbreviationAnnoB = \"SM\"                   out_dir = \"/Users/user1/projectname/workplace/                   annotation/merge/anno_merged.gff\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"auto-detection-of-srna-cluster","dir":"Articles","previous_headings":"Pre-Processing","what":"Auto-Detection of sRNA Cluster","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"identify build list sRNA clusters within sample assist mapping step later ensure consistency across analysis. step important consider analysis prevents false assumptions. step aligns replicate given genome assembly outputs contains loci sRNA clusters found. Across replicates, difference cluster identified. instance, might case abundance reads given sRNA locus significant enough record sRNA cluster, another replicate recorded. Therefore, wrong assume zero reads loci. , identify potential sRNA cluster loci use information improve mapping. recommend installing ShortStack (https://github.com/MikeAxtell/ShortStack) program detect sRNA clusters align sRNAseq samples.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"step-1---cluster-analysis-with-shortstack","dir":"Articles","previous_headings":"Pre-Processing > Auto-Detection of sRNA Cluster","what":"Step 1 - Cluster analysis with ShortStack","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"","code":"ShortStack \\ --readfile <control_1.fastq> \\ --genomefile <merged_reference.fa> \\ --bowtie_cores 6 \\ --mmap n \\ --mismatches 0 \\ --nohp \\ --outdir <./output/directory>"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"step-2---build-srna-cluster-list","dir":"Articles","previous_headings":"Pre-Processing > Auto-Detection of sRNA Cluster","what":"Step 2 - Build sRNA cluster list","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Now, collate sRNA loci information sample text file.","code":"# location of step 1 output folder <- <./output/directory/from/step/1/>  # name and location to save output file to (must be .txt) save_folder <- <./output/directory/ClustersInfo.txt>  # names of samples (ie. folder names) sample_names <- c(\"<treatment_1>\", \"<treatment_2>\", \"<control_1>\",\"<control_2>\")   loci_info <- RNAloci(files = folder,               out = save_folder,              samples = sample_names)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"mapping","dir":"Articles","previous_headings":"Pre-Processing","what":"Mapping","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"sample mapped merged reference genome list sRNA clusters.","code":"ShortStack \\ --readfile <control_1.fastq> \\ --genomefile <merged_reference.fa> \\ --locifile <./output/directory/ClustersInfo.gff3> \\ --bowtie_cores 6 \\ --mmap n \\ --mismatches 0 \\ --nohp \\ --mincov 5 \\ --outdir <./output/directory/step2/>"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":", analysis pre-processed data occurs, aim identify mobile sRNA molecules traveling one genotype grafting system.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"import-data","dir":"Articles","previous_headings":"Analysis","what":"Import Data","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"pre-processing steps, data cleaned aligned merged reference genome. mapping step, folder sample created stores results . analysis steps requires information stored Results.txt. RNAimport() function imports data folder containing sample folders. function extracts required information, stores matrix. function requires information coordinate importation calculations. requires directory path processed samples; path folder containing individual sample folders stores argument directory. second directory path loci file containing information loci sRNA clusters across analysis, stored argument loci. last pieces information function requires vector containing sample names, treatment control replicates stored argument samples. sample names must match names folders produced mapping, stored directory supplied argument directory.","code":"## Import & organise data. results_dir <-  \"./analysis/alignment_unique_two/\" sample_names <- c(\"heterograft_1\",\"heterograft_2\", \"heterograft_3\",                   \"selfgraft_1\", \"selfgraft_2\", \"selfgraft_3\")   sRNA_data <- RNAimport(input = \"sRNA\",                        directory = results_dir,                            samples = sample_names) # example dataframe  head(sRNA_data) #>                   Locus chr     start       end   Cluster #> 1 1:100000956-100001076   1 100000956 100001076 cluster_1 #> 2 1:100001486-100001554   1 100001486 100001554 cluster_2 #> 3 1:100001646-100001731   1 100001646 100001731 cluster_3 #> 4   1:10001034-10001073   1  10001034  10001073 cluster_4 #> 5 1:100011795-100011930   1 100011795 100011930 cluster_5 #> 6   1:10002000-10002065   1  10002000  10002065 cluster_6 #>   DicerCall_heterograft_1 Count_heterograft_1 RPM_heterograft_1 #> 1                      24                  19             1.908 #> 2                      24                   3             0.301 #> 3                       N                   3             0.301 #> 4                      24                   1             0.100 #> 5                      24                  11             1.105 #> 6                      24                   9             0.904 #>      MajorRNA_heterograft_1 DicerCall_heterograft_2 Count_heterograft_2 #> 1  AGUGACGGUCUCAUGUAACAUAGA                      24                  14 #> 2  AAAGAGUAGACAUAUAUUAAAUGG                      20                   5 #> 3 CUGUCUCAUGUGACACUCUUUCACU                      23                   6 #> 4  AAAUUGUCAUUUAGUCAGAGGAAU                       N                   0 #> 5  AUAGACAAAUCGCACUCGCUCUCG                      24                   2 #> 6  UUAGAUUUCUGGAGUAACAACUUU                       N                   2 #>   RPM_heterograft_2   MajorRNA_heterograft_2 DicerCall_heterograft_3 #> 1             1.803 AGUGACGGUCUCAUGUAACAUAGA                      24 #> 2             0.644     ACAUAUUUUUUUGGACGAAC                      24 #> 3             0.773  UCUGUCUCAUGUGACACUCUUUC                      24 #> 4             0.000                        N                      24 #> 5             0.258 AAGUGUCUACCCAUUGUGAUUCGC                      24 #> 6             0.258      UUAUUGACAAACUAUAACU                      22 #>   Count_heterograft_3 RPM_heterograft_3   MajorRNA_heterograft_3 #> 1                  30             2.953 AGUGACGGUCUCAUGUAACAUAGA #> 2                   1             0.098 UAUGUCUACUCUUUAUUACUCUCC #> 3                  11             1.083 AUCUUGUCAAGUGAAAGAGUGUCA #> 4                  11             1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                   5             0.492 AAUCACAAUGGGUAGACACUUAGA #> 6                   3             0.295 UUAGAUUUCUGGAGUAACAACUUU #>   DicerCall_selfgraft_1 Count_selfgraft_1 RPM_selfgraft_1 #> 1                    24                19           1.909 #> 2                    24                 3           0.301 #> 3                     N                 3           0.301 #> 4                    24                 1           0.100 #> 5                    24                11           1.105 #> 6                    24                 9           0.904 #>        MajorRNA_selfgraft_1 DicerCall_selfgraft_2 Count_selfgraft_2 #> 1  AGUGACGGUCUCAUGUAACAUAGA                    24                14 #> 2  AAAGAGUAGACAUAUAUUAAAUGG                    20                 5 #> 3 CUGUCUCAUGUGACACUCUUUCACU                    23                 6 #> 4  AAAUUGUCAUUUAGUCAGAGGAAU                     N                 0 #> 5  AAUGGGUAGACACUUAGAUACAUG                    24                 2 #> 6  UUAGAUUUCUGGAGUAACAACUUU                     N                 2 #>   RPM_selfgraft_2     MajorRNA_selfgraft_2 DicerCall_selfgraft_3 #> 1           1.804 AGUGACGGUCUCAUGUAACAUAGA                    24 #> 2           0.644     ACAUAUUUUUUUGGACGAAC                    24 #> 3           0.773  UCUGUCUCAUGUGACACUCUUUC                    24 #> 4           0.000                        N                    24 #> 5           0.258 AUAGACAAAUCGCACUCGCUCUCG                    24 #> 6           0.258  AGAUUUCUGGAGUAACAACUUUG                    22 #>   Count_selfgraft_3 RPM_selfgraft_3     MajorRNA_selfgraft_3 #> 1                30           2.954 AGUGACGGUCUCAUGUAACAUAGA #> 2                 1           0.098 UAUGUCUACUCUUUAUUACUCUCC #> 3                11           1.083 AUCUUGUCAAGUGAAAGAGUGUCA #> 4                11           1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                 5           0.492 AAUCACAAUGGGUAGACACUUAGA #> 6                 3           0.295   UUGACAAACUAUAACUUAAAUU"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"sample-level-quality-control","dir":"Articles","previous_headings":"Analysis","what":"Sample-level quality control","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"handy step analysis assess overall similarity sample replicates understand samples similar different, variation introduced data set. well understanding whether data set meets expectations. expected conditions, sample replicates show enough variation suggest replicates different groups. investigate sample similarity/difference, undertake sample-level quality control using three different methods: Distribution RNA classes within sample Principle component analysis (PCA) hierarchical clustering Heatmap show us well samples within condition cluster together, may highlight outliers. Plus, show whether experimental conditions represent main source variation data set. employing unsupervised clustering methods PCA hierarchical clustering Heatmap. involves unbiased log2-transformation counts emphasis sample clustering improve visualization. DESeq2 package contains particularly useful function undertake regularized log transformation (rlog) controls variance across mean, package utilized quality control steps.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"plot-the-distribution-of-rna-classes-within-each-sample","dir":"Articles","previous_headings":"Analysis > Sample-level quality control","what":"Plot the distribution of RNA classes within each sample","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Explore number RNA class identified within sample using RNAdistribution function produces table plots results. results can plotted either bar chart (style = \"bar\") line graph (style = \"line\") sample can shown bar chart facet (facet = TRUE) single line graph, line represents sample (together=TRUE). Alternatively, results can plotted individually sample either format. Lets view plots: example line graph () bar graph (B), show distribution RNA classes within sample. Figure C shows replicates plotted single plot accompanying data.","code":"# plot each replicate as a line, separately, and facet  sample_distribution_line <- RNAdistribution(sRNA_data,                                             style = \"line\",                                             together = FALSE,facet = TRUE)                                                # plot each replicate as a bar, separately, and facet  sample_distribution_bar <- RNAdistribution(sRNA_data,                                            style = \"bar\",                                            facet = TRUE)  # plot each replicate on a single plot sample_distribution <- RNAdistribution(sRNA_data,                                            style = \"line\",                                            together = TRUE) # View plot (only) sample_distribution_line$plot    # View plot (only) sample_distribution_bar$plot  # View plot sample_distribution$plot # View data  sample_distribution$data #>    Class heterograft_1 heterograft_2 heterograft_3 selfgraft_1 selfgraft_2 #> 1:    20             9            14             7           8          13 #> 2:    21            27            28            24          25          26 #> 3:    22            19            27            26          19          27 #> 4:    23            25            38            42          18          31 #> 5:    24           597           491           575         459         353 #>    selfgraft_3 #> 1:           6 #> 2:          22 #> 3:          26 #> 4:          35 #> 5:         437"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"principle-component-analysis-to-assess-sample-distance","dir":"Articles","previous_headings":"Analysis > Sample-level quality control","what":"Principle component analysis to assess sample distance","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Principal Component Analysis (PCA) useful technique illustrate sample distance emphasizes variation reduction dimensions data set. , introduce function plotSamplePCA() example PCA, illustracting sRNA data set sample similarity PCA somewhat expect see real dataset. PC1 showing variation non-spiked spiked version replicate PC2 shows natural variation replicates. real dataset, expect little difference treatment control. much natural variation replicates, unlikely huge distinctive variation samples across conditions. likely small number endogenous mobile sRNAs present heterograft system compared self-graft controls population sRNAs present destination tissue expected largely similar. Although, likely difference due endogenous changes.","code":"group <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",             \"Selfgraft\", \"Selfgraft\", \"Selfgraft\")  plotSamplePCA(sRNA_data, group)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"hierarchical-clustered-heatmap-to-assess-sample-distance","dir":"Articles","previous_headings":"Analysis > Sample-level quality control","what":"Hierarchical clustered heatmap to assess sample distance","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Similarly, PCA plot, plotSampleDistance() function undertakes hierarchical clustering unbiased log transformation calculate sample distance plotted form heatmap. example heatmap,illustracting sRNA data set sample similarity","code":"plotSampleDistance(sRNA_data)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"define-the-consensus-rna-class","dir":"Articles","previous_headings":"Analysis","what":"Define the consensus RNA class","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"look sRNA_data object, see sample class sRNA determined (see columns names starting DicerCall). result either state number 20-24 represents nucleotide length sRNA, , state NA/N represents sRNA unclassified sample. usually discrepancies classification sRNA, therefore, consensus class can assigned based information treatment samples. RNAdicercall() function used compute counting number occurrences classifications sRNA. consensus determined based class counts. working samples chimeric system, function contains specialised parameter utilized. chimeric=TRUE, along id controls parameters. helps optimise classification removal mapping errors. Moreover, user prefer form dicer consensus based results specific samples can specified conditions parameter. function also works remove noise data, default undertaken. user wishes remove noise, set tidy=TRUE promote removal unclassified clusters. downstream analysis, can useful define distinct 24-nt 21/22-nt populations sRNA molecules beginning analysis. Hence, data subset. subset data, use RNAsubset() function choose sRNA populations include: 20-nt, 21-nt, 22-nt, 23-nt, 24-nt. recommended subset data two dataframes: one includes 24-nt sRNA include 21-nt 22-nt sRNAs. instruct RNAsubset() function select specific groups, use type argument.","code":"# define consensus, store as a data summary file. sRNA_data_consensus2 <- RNAdicercall(data = sRNA_data, chimeric = TRUE,                                       genome.ID = \"SL\",                                       controls = c(\"selfgraft_1\",                                                    \"selfgraft_2\",                                                    \"selfgraft_3\"),                                      tidy=TRUE)  head(sRNA_data_consensus) #>                   Locus chr     start       end   Cluster #> 1 1:100000956-100001076   1 100000956 100001076 cluster_1 #> 2 1:100001486-100001554   1 100001486 100001554 cluster_2 #> 4   1:10001034-10001073   1  10001034  10001073 cluster_4 #> 5 1:100011795-100011930   1 100011795 100011930 cluster_5 #> 7   1:10002223-10002449   1  10002223  10002449 cluster_7 #> 8   1:10002531-10002593   1  10002531  10002593 cluster_8 #>   DicerCall_heterograft_1 Count_heterograft_1 RPM_heterograft_1 #> 1                      24                  19             1.908 #> 2                      24                   3             0.301 #> 4                      24                   1             0.100 #> 5                      24                  11             1.105 #> 7                      24                  20             2.009 #> 8                      24                  12             1.205 #>     MajorRNA_heterograft_1 DicerCall_heterograft_2 Count_heterograft_2 #> 1 AGUGACGGUCUCAUGUAACAUAGA                      24                  14 #> 2 AAAGAGUAGACAUAUAUUAAAUGG                      20                   5 #> 4 AAAUUGUCAUUUAGUCAGAGGAAU                       N                   0 #> 5 AUAGACAAAUCGCACUCGCUCUCG                      24                   2 #> 7 AACGUGAAUUCUGAUGAAACCAAU                      24                  12 #> 8 AGGGUAUAUUGGUAUUGGACCAUC                      24                   9 #>   RPM_heterograft_2   MajorRNA_heterograft_2 DicerCall_heterograft_3 #> 1             1.803 AGUGACGGUCUCAUGUAACAUAGA                      24 #> 2             0.644     ACAUAUUUUUUUGGACGAAC                      24 #> 4             0.000                        N                      24 #> 5             0.258 AAGUGUCUACCCAUUGUGAUUCGC                      24 #> 7             1.545 UUAUAACGUGAAUUCUGAUGAAAC                      24 #> 8             1.159 AUAUUGGUAUUGGACCAUCAGAUU                      24 #>   Count_heterograft_3 RPM_heterograft_3   MajorRNA_heterograft_3 #> 1                  30             2.953 AGUGACGGUCUCAUGUAACAUAGA #> 2                   1             0.098 UAUGUCUACUCUUUAUUACUCUCC #> 4                  11             1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                   5             0.492 AAUCACAAUGGGUAGACACUUAGA #> 7                  29             2.855  AUAACGUGAAUUCUGAUGAAACC #> 8                  16             1.575 GGUAUUGGACCAUCAGAUUGACGA #>   DicerCall_selfgraft_1 Count_selfgraft_1 RPM_selfgraft_1 #> 1                    24                19           1.909 #> 2                    24                 3           0.301 #> 4                    24                 1           0.100 #> 5                    24                11           1.105 #> 7                    24                20           2.010 #> 8                    24                12           1.206 #>       MajorRNA_selfgraft_1 DicerCall_selfgraft_2 Count_selfgraft_2 #> 1 AGUGACGGUCUCAUGUAACAUAGA                    24                14 #> 2 AAAGAGUAGACAUAUAUUAAAUGG                    20                 5 #> 4 AAAUUGUCAUUUAGUCAGAGGAAU                     N                 0 #> 5 AAUGGGUAGACACUUAGAUACAUG                    24                 2 #> 7 AACGUGAAUUCUGAUGAAACCAAU                    24                12 #> 8 AGGGUAUAUUGGUAUUGGACCAUC                    24                 9 #>   RPM_selfgraft_2     MajorRNA_selfgraft_2 DicerCall_selfgraft_3 #> 1           1.804 AGUGACGGUCUCAUGUAACAUAGA                    24 #> 2           0.644     ACAUAUUUUUUUGGACGAAC                    24 #> 4           0.000                        N                    24 #> 5           0.258 AUAGACAAAUCGCACUCGCUCUCG                    24 #> 7           1.546 UUAUAACGUGAAUUCUGAUGAAAC                    24 #> 8           1.160 AUAUUGGUAUUGGACCAUCAGAUU                    24 #>   Count_selfgraft_3 RPM_selfgraft_3     MajorRNA_selfgraft_3 DicerCounts #> 1                30           2.954 AGUGACGGUCUCAUGUAACAUAGA           3 #> 2                 1           0.098 UAUGUCUACUCUUUAUUACUCUCC           3 #> 4                11           1.083 AUUCCUCUGACUAAAUGACAAUUU           2 #> 5                 5           0.492 AAUCACAAUGGGUAGACACUUAGA           3 #> 7                29           2.856  AUAACGUGAAUUCUGAUGAAACC           3 #> 8                16           1.576 GGUAUUGGACCAUCAGAUUGACGA           3 #>   DicerConsensus #> 1             24 #> 2             24 #> 4             24 #> 5             24 #> 7             24 #> 8             24  # Subset data for analysis: 24-nt sRNAs sRNA_24 <- RNAsubset(sRNA_data_consensus, type = 24) # Subset data for analysis: 24 21/22-nt sRNAs sRNA_2122 <- RNAsubset(sRNA_data_consensus, type = c(21, 22))"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"plot-consensus-classification-of-srna","dir":"Articles","previous_headings":"Analysis > Define the consensus RNA class","what":"Plot consensus classification of sRNA","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Use RNAdistriution() visualize distribution consensus sRNA classes within data. step can used quality control step illustrate distribution sRNA class within data. function can plot absolute relative frequency, use argument relative. can beneficial view absolute frequency well relative observe whether data meets expectations.","code":"consensus_plot <- RNAdistribution(data = sRNA_data_consensus,                                   consensus = TRUE,                                    style = \"consensus\") # view  consensus_plot$plot consensus_plot$data #>   DicerConsensus   n #> 1             20   5 #> 2             21  20 #> 3             22  14 #> 4             23  19 #> 5             24 601"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"differential-expression-analysis-with-deseq2-or-edger","dir":"Articles","previous_headings":"Analysis","what":"Differential Expression analysis with DESeq2 or edgeR","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Differential expression (DE) analysis undertaken identify sRNA statistically significant discover quantitative changes expression levels treatment (hetero-grafting) control (self-grafting) groups. technique can undertaken variety tools, mobileRNA users option use DESeq2 edgeR analytical method. Although methods produce different results, typically case step isolate mobile molecules, results produce. meant , mobile molecules typically identified end analysis regardless analytical method. However, particular case, one method preferred . instance, DESeq2 method appropriate experiment contain replicate (ie. one sample replicate per condition). hand, edgeR can used. , included recommend practice edgeR data set contain replicates. option can employed setting custom dispersion value, see argument dispersionValue. Please note step optional required part analysis.","code":"# sample conditions in order within dataframe groups <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",             \"Selfgraft\", \"Selfgraft\", \"Selfgraft\")  ## Differential analysis of whole dataset: DEseq2 method  sRNA_DESeq2 <- RNAanalysis(data = sRNA_data_consensus,                               group = groups,                               method = \"DESeq2\" )  ## Differential analysis: DEseq2 method # 24-nt sRNA data-set sRNA_24_DESeq2 <- RNAanalysis(data = sRNA_24,                               group = groups,                               method = \"DESeq2\" ) # 2122-nt sRNA data-set sRNA_2122_DESeq2 <- RNAanalysis(data = sRNA_2122,                                 group = groups,                                 method = \"DESeq2\" )   ## Differential analysis of whole dataset: edgeR method  sRNA_edgeR <- RNAanalysis(data = sRNA_data_consensus,                               group = groups,                               method = \"edgeR\" ) #> Design matrix not provided. Switch to the classic mode.   ## Differential analysis: edgeR method sRNA_24_edgeR <- RNAanalysis(data = sRNA_24,                              group = groups,                              method = \"edgeR\" ) #> Design matrix not provided. Switch to the classic mode.  sRNA_2122_edgeR <- RNAanalysis(data = sRNA_2122 ,                                group = groups,                                method = \"edgeR\" ) #> Design matrix not provided. Switch to the classic mode.  # view example output: head(sRNA_edgeR) #>                   Locus chr     start       end   Cluster #> 1 1:100000956-100001076   1 100000956 100001076 cluster_1 #> 2 1:100001486-100001554   1 100001486 100001554 cluster_2 #> 4   1:10001034-10001073   1  10001034  10001073 cluster_4 #> 5 1:100011795-100011930   1 100011795 100011930 cluster_5 #> 7   1:10002223-10002449   1  10002223  10002449 cluster_7 #> 8   1:10002531-10002593   1  10002531  10002593 cluster_8 #>   DicerCall_heterograft_1 Count_heterograft_1 RPM_heterograft_1 #> 1                      24                  19             1.908 #> 2                      24                   3             0.301 #> 4                      24                   1             0.100 #> 5                      24                  11             1.105 #> 7                      24                  20             2.009 #> 8                      24                  12             1.205 #>     MajorRNA_heterograft_1 DicerCall_heterograft_2 Count_heterograft_2 #> 1 AGUGACGGUCUCAUGUAACAUAGA                      24                  14 #> 2 AAAGAGUAGACAUAUAUUAAAUGG                      20                   5 #> 4 AAAUUGUCAUUUAGUCAGAGGAAU                       N                   0 #> 5 AUAGACAAAUCGCACUCGCUCUCG                      24                   2 #> 7 AACGUGAAUUCUGAUGAAACCAAU                      24                  12 #> 8 AGGGUAUAUUGGUAUUGGACCAUC                      24                   9 #>   RPM_heterograft_2   MajorRNA_heterograft_2 DicerCall_heterograft_3 #> 1             1.803 AGUGACGGUCUCAUGUAACAUAGA                      24 #> 2             0.644     ACAUAUUUUUUUGGACGAAC                      24 #> 4             0.000                        N                      24 #> 5             0.258 AAGUGUCUACCCAUUGUGAUUCGC                      24 #> 7             1.545 UUAUAACGUGAAUUCUGAUGAAAC                      24 #> 8             1.159 AUAUUGGUAUUGGACCAUCAGAUU                      24 #>   Count_heterograft_3 RPM_heterograft_3   MajorRNA_heterograft_3 #> 1                  30             2.953 AGUGACGGUCUCAUGUAACAUAGA #> 2                   1             0.098 UAUGUCUACUCUUUAUUACUCUCC #> 4                  11             1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                   5             0.492 AAUCACAAUGGGUAGACACUUAGA #> 7                  29             2.855  AUAACGUGAAUUCUGAUGAAACC #> 8                  16             1.575 GGUAUUGGACCAUCAGAUUGACGA #>   DicerCall_selfgraft_1 Count_selfgraft_1 RPM_selfgraft_1 #> 1                    24                19           1.909 #> 2                    24                 3           0.301 #> 4                    24                 1           0.100 #> 5                    24                11           1.105 #> 7                    24                20           2.010 #> 8                    24                12           1.206 #>       MajorRNA_selfgraft_1 DicerCall_selfgraft_2 Count_selfgraft_2 #> 1 AGUGACGGUCUCAUGUAACAUAGA                    24                14 #> 2 AAAGAGUAGACAUAUAUUAAAUGG                    20                 5 #> 4 AAAUUGUCAUUUAGUCAGAGGAAU                     N                 0 #> 5 AAUGGGUAGACACUUAGAUACAUG                    24                 2 #> 7 AACGUGAAUUCUGAUGAAACCAAU                    24                12 #> 8 AGGGUAUAUUGGUAUUGGACCAUC                    24                 9 #>   RPM_selfgraft_2     MajorRNA_selfgraft_2 DicerCall_selfgraft_3 #> 1           1.804 AGUGACGGUCUCAUGUAACAUAGA                    24 #> 2           0.644     ACAUAUUUUUUUGGACGAAC                    24 #> 4           0.000                        N                    24 #> 5           0.258 AUAGACAAAUCGCACUCGCUCUCG                    24 #> 7           1.546 UUAUAACGUGAAUUCUGAUGAAAC                    24 #> 8           1.160 AUAUUGGUAUUGGACCAUCAGAUU                    24 #>   Count_selfgraft_3 RPM_selfgraft_3     MajorRNA_selfgraft_3 DicerCounts #> 1                30           2.954 AGUGACGGUCUCAUGUAACAUAGA           3 #> 2                 1           0.098 UAUGUCUACUCUUUAUUACUCUCC           3 #> 4                11           1.083 AUUCCUCUGACUAAAUGACAAUUU           2 #> 5                 5           0.492 AAUCACAAUGGGUAGACACUUAGA           3 #> 7                29           2.856  AUAACGUGAAUUCUGAUGAAACC           3 #> 8                16           1.576 GGUAUUGGACCAUCAGAUUGACGA           3 #>   DicerConsensus CountMean log2FoldChange    pvalue padjusted    logCPM #> 1             24  21.00000     0.09399726 0.7992536         1 10.819068 #> 2             24   3.00000     0.20765865 0.8863680         1  8.661401 #> 4             24   4.00000     0.01104373 1.0000000         1  8.831677 #> 5             24   6.00000     0.07211172 1.0000000         1  9.271215 #> 7             24  20.33333     0.08714351 0.8448235         1 10.763685 #> 8             24  12.33333     0.09474876 0.8602119         1 10.144466"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"identify-the-mobile-molecules","dir":"Articles","previous_headings":"Analysis","what":"Identify the mobile molecules","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"essential remove noise data isolate potential mobile molecules include falsely mapped clusters , case, clusters map scion genotype aim identify molecules traveling rootstock. data, aim explore whether tomato sRNA traveling graft junction exiting eggplant leaf tissues. can identify potential mobile molecule using RNAmobile() function. selects clusters mapping rootstock genome hetero-graft. Therefore, remove clusters mapped chromosome genotype used self-graft controls. example, tomato genome chromosome labeled “SL40” whilst eggplant genome labels. remove clusters associated eggplant genome keep clusters associated tomato genome, set \"task\" argument \"keep\". RNAmobile() function can take account statistically significance. set consider , function filter sRNA based adjusted p-value threshold = 0.05. threshold can changed make less stringent using argument padj.Similarly, prefer extract mobile RNA based p-value,rather adjusted p-values, numeric threshold can set argument p.value. default, function consider statistical values properties sRNAs. consider, use statistical=TRUE used datasets contains additional columns statistical values. stated , need use statistical values identify mobile molecules can explored utilised plot heatmap based logFC.","code":"# vector of control names control_names <- c(\"selfgraft_1\", \"selfgraft_2\", \"selfgraft_3\")   ## Identify potential tomato mobile molecules, before subsetting classes mobile_sRNA <- RNAmobile(data = sRNA_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\",                           statistical = FALSE)  # or identify within specific classes  # within 24-nt sRNA datset  mobile_sRNA_24 <- RNAmobile(data = sRNA_24_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\") # within 21/22-nt sRNA datset mobile_sRNA_2122 <- RNAmobile(data = sRNA_2122_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\")   # If you wish to consider the statistical values from DESeq2 analysis   mobile_sRNA_sig24 <- RNAmobile(data = sRNA_24_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\",                           statistical = TRUE)  mobile_sRNA_sig2122 <- RNAmobile(data = sRNA_2122_DESeq2,                           controls = control_names,                          genome.ID = \"SL40\",                          task = \"keep\",                           statistical = TRUE)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"heatmap-plots-to-represent-mobile-molecules","dir":"Articles","previous_headings":"Analysis > Identify the mobile molecules","what":"Heatmap plots to represent mobile molecules","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"can use hierarchical clustering heatmap analysis potential statistically significant mobile sRNAs identified. expected log2 fold changes opposite treatment controls treatment samples shows -regulation control samples show -regulation.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"mobile-molecules-from-the-24-nt-srna-dataset","dir":"Articles","previous_headings":"Analysis > Identify the mobile molecules","what":"Mobile molecules from the 24-nt sRNA dataset","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"example heatmap potential mobile RNA molecules Identifed DESeq2 method Class 24-nt sRNAs (left) Class 21/22-nt sRNAs (right). rows represents sRNA cluster number columns represents replicates.","code":"p10 <- plotHeatmap(mobile_sRNA_sig24) p11 <- plotHeatmap(mobile_sRNA_sig2122)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"save-output","dir":"Articles","previous_headings":"Analysis > Identify the mobile molecules","what":"Save output","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"","code":"write.table(mobile_sRNA, \"./output.txt\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"functional-analysis","dir":"Articles","previous_headings":"Analysis","what":"Functional Analysis","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"now retrieved list potentially mobile sRNA molecules want identify whether play role biological system. Small interfering RNAs (siRNAs) length 24-nucleotides, known play role RNA-directed DNA methylation pathway via targeting complementary sequencing DNA. , miRNAs length 21/22-nucleotides, known instigate post-transcriptional gene silencing via mRNA degradation repression translation. predict function mobile sRNA destination tissues, can overlap information genome annotation origin tissue determine local functionality. well , retrieving nucleotide sequence abundant sRNA within cluster locating complementary sequences genome origin genome destination using BLAST. different datatypes, example RNAseq BSseq, want overlap data might interesting see whether complementary DNA sequences promoter regions deferentially expressed genes interest identified potential mobile sRNAs. Moreover, theory, regions also show differential methylation potential indication molecular pathway. IMPORTANT: chromosome names altered either genome assemblies used mapping steps, chromosome names genome annotation files must match pattern. used [mobileRNA::RNAmergeGenomes()] function, chromosome names default altered. [mobileRNA::RNAmergeAnnotations()] function can utilsed alter genome annotation files way. functions alters names, saves altered genome annotation merges one.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"add-genomic-attributes-to-srna-clusters","dir":"Articles","previous_headings":"Analysis > Functional Analysis","what":"Add genomic attributes to sRNA clusters","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"sRNA cluster contains coordinates, can matches coordinates annotation file. match, function returns input data additional fields, sRNA cluster receive information : source : name program generated feature, data source (database project name) feature : feature type name, e.g. Gene, Variation, Similarity score : floating point value strand : defined + (forward) - (reverse) frame : One ‘0’, ‘1’ ‘2’. ‘0’ indicates first base feature first base codon, ‘1’ second base first base codon, attribute : semicolon-separated list tag-value pairs, providing additional information feature. Using genomic locations mobile sRNA clusters, can identify overlaps genome annotation origin tissue predict implication mobile sRNA. function can utilsed beginning analysis steps sRNA clusters genotypes can annotated genomic attributes associated location. can completed single step using merge annotation file using function [mobileRNA::RNAmergeAnnotations()].","code":"mobile_df_attributes <- RNAattributes(data = mobile_sRNA,                             annotation = \"./annotation/origin_annotation.gff3\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"summarise-overlaps-with-genomic-features","dir":"Articles","previous_headings":"Analysis > Functional Analysis","what":"Summarise overlaps with genomic features","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"can also locate specific genomic features overlap sRNA cluster locus including promoter regions, exon, introns, untranslated regions repeat regions.results can either displayed matrix absolute value percentage total: NOTE: function look exact matches locus (chromosome, start end regions) sRNA cluster annotation file. distribution sRNA clusters across genomic features strongly related class sRNA based nucleotide length. expected 24-nt sRNA associated repeat regions promoter regions, 21/22-nt sRNA likely associated coding sequence. resulting dataframe can passed plot choice. Similarly, features can utilsed across different data sets. example, across total data set specific mobile sRNA subsets.","code":"mobile_df_features <- RNAfeatures(data = mobile_sRNA,                             annotation = \"./annotation/origin_annotation.gff3\",                        repeats = \"./annotation/origin_annotation_repeats.gff3\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"retrieve-srna-sequence-complementary-sequences","dir":"Articles","previous_headings":"Analysis > Functional Analysis","what":"Retrieve sRNA sequence & complementary sequences","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Lastly, lets extract sRNA cluster sequences.can utilised BLAST, plant sRNA target prediction tools TargetFinder (https://github.com/carringtonlab/TargetFinder) overlapped mRNAseq data identify complementary sequences elucidate potential function sRNAs. RNAsequences function identifies whether abundant sRNA consistent across replicates, , extracts sRNA nucleotide sequence calculates RNA DNA complementary sequences, well stating length sequence.","code":"mobile_sequences <- RNAsequences(mobile_sRNA) #> The minimum number of matches required to form a consensus sRNA sequence is... 1 #> The consensus sRNA sequences will be choose at random in the case of a tie  head(mobile_sequences) #>             Cluster Match                 Sequence Width #> 1610 cluster_133430    No                     <NA>  <NA> #> 2010 cluster_133435   Yes AUGUAACUGAUUGAGUAUAUAUUU    24 #> 2410 cluster_133450   Yes  CCCGGACUGUCGGACACUACACA    23 #> 2510 cluster_133451   Yes  ACGGCCUAUUGCACACCUGAAUU    23 #> 2610 cluster_133452   Yes AGGAUUACUUACCACUCCACCAUA    24 #> 2810 cluster_133455   Yes ACACUUGUAGGUCUGAGUGAAACU    24 #>             Complementary_RNA        Complementary_DNA #> 1610                       NA                       NA #> 2010 UACAUUGACUAACUCAUAUAUAAA TACATTGACTAACTCATATATAAA #> 2410  GGGCCUGACAGCCUGUGAUGUGU  GGGCCTGACAGCCTGTGATGTGT #> 2510  UGCCGGAUAACGUGUGGACUUAA  TGCCGGATAACGTGTGGACTTAA #> 2610 UCCUAAUGAAUGGUGAGGUGGUAU TCCTAATGAATGGTGAGGTGGTAT #> 2810 UGUGAACAUCCAGACUCACUUUGA TGTGAACATCCAGACTCACTTTGA"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"explore-population-scale-srna-difference","dir":"Articles","previous_headings":"Analysis","what":"Explore population-scale sRNA difference","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":", look comparing native population sRNAs might changes leaf due chimeric system compared control. reminder, data used yield results treatment control samples contain exact population eggplant sRNAs, difference treatment samples spiked tomato sRNA clusters. already undertaken statistical analysis previous steps, utilising dataset going forward.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"srna-abundance","dir":"Articles","previous_headings":"Analysis > Explore population-scale sRNA difference","what":"sRNA abundance","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"comparing treatment control conditions, might case sRNA clusters found within yet difference total abundance shared clusters. instance, given sRNA cluster samples treatment condition might greater abundance samples control condition. difference attribute observed differences. statistical analysis calculated log2FC values sRNA cluster comparing normalised counts treatment control. , positive log2FC indicates increased abundance transcripts given sRNA cluster treatment compared control, negative log2FC indicates decreased abundance transcripts given sRNA cluster. statistical significance log2FC determined (adjusted) pvalue also calculated previous step. filter data select sRNA clusters statistically significant, plot results heatmap compare conditions. Lets look plot:","code":"# select only significant sRNAs significant_sRNAs <- RNAsignificant(sRNA_edgeR)   #plot p1 <- plotHeatmap(significant_sRNAs) p1$plot"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"step-6-identify-absolute-srna-population-difference","dir":"Articles","previous_headings":"Analysis","what":"Step 6: Identify absolute sRNA population difference","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"Finally, RNApopulation() function can utilised identify unique sRNA populations found treatment control condition. First lets look sRNA clusters unique treatment condition. chimeric heterografts, expect foreign sRNAs also selected pick-, therefore, can use parameter genome.ID remove sRNA cluster related foreign genome. Now, sRNA clusters unique control condition:  plotting functions within package can used display results, specifically RNAdistribution() plotHeatmap(). Similarly, functions assist functional analysis can also utilsied pull consensus sRNA sequence cluster population, find overlaps known annotations native genome.","code":"# select sRNA clusters only found in treatment & not in the control samples treatment_reps <- c(\"heterograft_1\", \"heterograft_2\" , \"heterograft_3\") unique_treatment <- RNApopulation(data = sRNA_data_consensus,                                     conditions = treatment_reps)  # look at number of sRNA cluster only found in treatment  nrow(unique_treatment) # select sRNA clusters only found in control & not in the treatment samples control_reps <- c(\"selfgraft_1\", \"selfgraft_2\" , \"selfgraft_3\") unique_control <- RNApopulation(data = sRNA_data_consensus,                                     conditions = control_reps) # look at number of sRNA cluster only found in control   nrow(unique_control)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"additional-features","dir":"Articles","previous_headings":"","what":"Additional features","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"mobileRNA package offers several optional extra-helpful functions aid analysis. includes function calculate mean RPM counts across specific samples also calculate overlap genomic features sRNA clusters.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"calculate-rpm-and-count-means-for-specific-samples","dir":"Articles","previous_headings":"Additional features","what":"Calculate RPM and Count means for specific samples","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"function calculates RPM mean Count mean across specific samples.output calculation added additional column input dataframe. can manipulated used identified mobile RNAs. calculating means identifying mobile molecules, recommend base heterograft samples rather full dataset (selfgrafts + heterograft replicates) potential mobile sRNAs zero counts RPM value selfgraft control replicates. including full dataset calculations, mean values mobile molecules skewed. Therefore, depending intended output function approached multiple ways.","code":"# calculate mean RPM and mean Counts for heterograft samples selected_samples <- c(\"heterograft_1\", \"heterograft_2\", \"heterograft_3\") means <- RNAmean(data = sRNA_data_consensus, conditions = selected_samples)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_chimeric.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Explore canditate mobile sRNAs & population-scale sRNA changes in chimeric systems using mobileRNA","text":"","code":"sessionInfo() #> R version 4.0.2 (2020-06-22) #> Platform: x86_64-apple-darwin17.0 (64-bit) #> Running under: macOS  10.16 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8 #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] mobileRNA_0.99.0 BiocStyle_2.16.1 #>  #> loaded via a namespace (and not attached): #>   [1] colorspace_2.0-3            rprojroot_2.0.2             #>   [3] DNAcopy_1.62.0              XVector_0.28.0              #>   [5] GenomicRanges_1.40.0        fs_1.5.2                    #>   [7] rstudioapi_0.14             farver_2.1.0                #>   [9] listenv_0.8.0               audio_0.1-10                #>  [11] affyio_1.58.0               ggrepel_0.9.1               #>  [13] bit64_4.0.5                 AnnotationDbi_1.50.3        #>  [15] fansi_1.0.2                 codetools_0.2-18            #>  [17] splines_4.0.2               Repitools_1.34.0            #>  [19] doParallel_1.0.17           cachem_1.0.6                #>  [21] geneplotter_1.66.0          knitr_1.42                  #>  [23] jsonlite_1.8.4              Rsamtools_2.4.0             #>  [25] annotate_1.66.0             cluster_2.1.2               #>  [27] vsn_3.56.0                  png_0.1-7                   #>  [29] pheatmap_1.0.12             BiocManager_1.30.16         #>  [31] compiler_4.0.2              Matrix_1.4-0                #>  [33] fastmap_1.1.0               limma_3.44.3                #>  [35] cli_3.6.0                   beepr_1.3                   #>  [37] htmltools_0.5.5             tools_4.0.2                 #>  [39] gtable_0.3.0                glue_1.6.2                  #>  [41] GenomeInfoDbData_1.2.3      affy_1.66.0                 #>  [43] dplyr_1.1.2                 Rcpp_1.0.8.3                #>  [45] Biobase_2.48.0              jquerylib_0.1.4             #>  [47] pkgdown_2.0.7               vctrs_0.6.2                 #>  [49] Biostrings_2.56.0           preprocessCore_1.50.0       #>  [51] progressr_0.10.0            rtracklayer_1.48.0          #>  [53] iterators_1.0.14            xfun_0.37                   #>  [55] stringr_1.5.0               globals_0.14.0              #>  [57] lifecycle_1.0.3             gtools_3.9.2                #>  [59] XML_3.99-0.9                future_1.24.0               #>  [61] edgeR_3.30.3                zlibbioc_1.34.0             #>  [63] MASS_7.3-55                 scales_1.2.1                #>  [65] BSgenome_1.56.0             ragg_1.2.2                  #>  [67] parallel_4.0.2              SummarizedExperiment_1.18.2 #>  [69] RColorBrewer_1.1-2          curl_4.3.2                  #>  [71] yaml_2.3.5                  pbapply_1.7-0               #>  [73] memoise_2.0.1               ggplot2_3.4.2               #>  [75] sass_0.4.0                  stringi_1.7.6               #>  [77] RSQLite_2.2.10              highr_0.9                   #>  [79] genefilter_1.70.0           S4Vectors_0.26.1            #>  [81] desc_1.4.1                  foreach_1.5.2               #>  [83] Ringo_1.52.0                caTools_1.18.2              #>  [85] BiocGenerics_0.34.0         BiocParallel_1.22.0         #>  [87] truncnorm_1.0-8             GenomeInfoDb_1.24.2         #>  [89] rlang_1.1.0                 pkgconfig_2.0.3             #>  [91] systemfonts_1.0.4           matrixStats_0.61.0          #>  [93] bitops_1.0-7                Rsolnp_1.16                 #>  [95] evaluate_0.15               lattice_0.20-45             #>  [97] purrr_1.0.1                 labeling_0.4.2              #>  [99] GenomicAlignments_1.24.0    bit_4.0.4                   #> [101] tidyselect_1.2.0            parallelly_1.30.0           #> [103] magrittr_2.0.3              bookdown_0.32               #> [105] DESeq2_1.28.1               R6_2.5.1                    #> [107] IRanges_2.22.2              gplots_3.1.1                #> [109] generics_0.1.2              DelayedArray_0.14.1         #> [111] DBI_1.1.2                   withr_2.5.0                 #> [113] pillar_1.9.0                gsmoothr_0.1.7              #> [115] RPushbullet_0.3.4           survival_3.3-1              #> [117] RCurl_1.98-1.6              future.apply_1.8.1          #> [119] tibble_3.2.1                crayon_1.5.0                #> [121] KernSmooth_2.23-20          utf8_1.2.2                  #> [123] rmarkdown_2.20              locfit_1.5-9.4              #> [125] grid_4.0.2                  data.table_1.14.2           #> [127] blob_1.2.2                  SimDesign_2.10.1            #> [129] digest_0.6.29               xtable_1.8-4                #> [131] tidyr_1.3.0                 textshaping_0.3.6           #> [133] stats4_4.0.2                munsell_0.5.0               #> [135] bslib_0.3.1                 sessioninfo_1.2.2"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analyse sRNA populations using mobileRNA","text":"plants, systemic signalling elaborated molecular system allows coordinate plant development entire organism level, integrating transmitting information perceived environment distant organs. RNA molecules play key role extensive network, across short long distances. , small RNAs (sRNA) shown involved post-transcriptional gene silencing RNA-directed DNA methylation. Alterations linked changes gene expression phenotypical changes trait. , introduce use mobileRNA R package tool sRNAseq analysis identify sRNA molecules biological system, regardless whether system chimeric . , RNA molecules, messenger RNA, also renown play role systemic signalling tool currently focuses identification local sRNA populations.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"method","dir":"Articles","previous_headings":"","what":"Method","title":"Analyse sRNA populations using mobileRNA","text":"Small RNAs (sRNAs) range 20-24 nucleotides length, regardless short length different groups specific roles genetic regulation plants. two key groups interest; micro-RNAs (miRNAs) size 21-22nt small-interfering-RNAs (siRNAs) size 24nt. miRNAs renown play role post-transcriptional regulation, siRNAs key components RNA-directed DNA methylation pathway. Therefore, understanding population dynamics sRNAs within biological system shed light gene expression DNA methylation patterns, bringing light molecular mechanisms underpinning biological processes. workflow can utilise explore sRNA populations species, can utilise treatment vs. control experimental design. workflow aid identification unique sRNA populations differences sRNA abundances treatment control conditions. guide suggests mapping steps, analysis steps, functional analysis steps.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Analyse sRNA populations using mobileRNA","text":"latest version mobileRNA can installed via GitHub using devtools package:","code":"if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"KJeynesCupper/mobileRNA\", ref = \"main\")  library(mobileRNA)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"Pre-processing","title":"Analyse sRNA populations using mobileRNA","text":"Assuming sRNAseq raw samples cleaned remove low quality reads remove adapter sequences, can align samples genome assembly detect sRNA clusters using Linux ShortStack program (https://github.com/MikeAxtell/ShortStack).","code":""},{"path":[]},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"step-1---cluster-analysis-with-shortstack","dir":"Articles","previous_headings":"Pre-processing > Auto-Detection of sRNA Cluster","what":"Step 1 - Cluster analysis with ShortStack","title":"Analyse sRNA populations using mobileRNA","text":"","code":"ShortStack \\ --readfile <control_1.fastq> \\ --genomefile <merged_reference.fa> \\ --bowtie_cores 6 \\ --mmap n \\ --mismatches 0 \\ --nohp \\ --outdir <./output/directory>"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"step-2---build-srna-cluster-list","dir":"Articles","previous_headings":"Pre-processing > Auto-Detection of sRNA Cluster > Step 1 - Cluster analysis with ShortStack","what":"Step 2 - Build sRNA cluster list","title":"Analyse sRNA populations using mobileRNA","text":"Now, collate sRNA loci information sample text file.","code":"# location of step 1 output folder <- \"./output/directory/from/step/1/\"  # name and location to save output file to (must be .txt) save_folder <- \"./output/directory/ClustersInfo.txt\"  # names of samples (ie. folder names) sample_names <- c(\"<treatment_1>\", \"<treatment_2>\", \"<control_1>\",\"<control_2>\")   loci_info <- RNAloci(files = folder,               out = save_folder,              samples = sample_names)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"mapping","dir":"Articles","previous_headings":"Pre-processing","what":"Mapping","title":"Analyse sRNA populations using mobileRNA","text":"sample mapped merged reference genome list sRNA clusters.","code":"ShortStack \\ --readfile <control_1.fastq> \\ --genomefile <merged_reference.fa> \\ --locifile <./output/directory/ClustersInfo.gff3> \\ --bowtie_cores 6 \\ --mmap n \\ --mismatches 0 \\ --nohp \\ --mincov 5 \\ --outdir <./output/directory/step2/>"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Analyse sRNA populations using mobileRNA","text":"aligned data can now analysed R, native population sRNAs can explored. following analysis workflow designed facilitate treatment vs control experimental design. analysis use semi-synthetic data, although two different genotypes analysis can still utilised show different sRNA population dynamics.","code":"library(mobileRNA) data(\"sRNA_data\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"step-1-import-data","dir":"Articles","previous_headings":"Analysis","what":"Step 1: Import data","title":"Analyse sRNA populations using mobileRNA","text":"State type data (“sRNA” ), location mapping results directory, sample names.","code":"# Directory containing results results_dir <-  \"<./output/directory/step2/>\"  # Sample names and total number of reads, in the same order.  sample_names <- c(\"heterograft_1\", \"heterograft_2\" , \"heterograft_3\",                    \"selfgraft_1\", \"selfgraft_2\", \"selfgraft_3\")   sRNA_data <- RNAimport(input = \"sRNA\",                         directory = results_dir,                        samples = sample_names)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"step-2-quality-control","dir":"Articles","previous_headings":"Analysis","what":"Step 2: Quality control","title":"Analyse sRNA populations using mobileRNA","text":"handy step analysis assess overall similarity difference samples within conditions conditions. identify variation introduced data set, well understanding whether data set meets expectations, quality-wise. expected conditions, sample replicates show enough variation suggest replicates different groups. use following methods: * Distribution RNA classes within sample * Principle component analysis (PCA) * Heatmap using Hierarchical clustering show us well samples within condition cluster together, may highlight outliers. Plus, show whether experimental conditions represent main source variation data set.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"principle-component-analysis-pca","dir":"Articles","previous_headings":"Analysis > Step 2: Quality control","what":"Principle component analysis (PCA)","title":"Analyse sRNA populations using mobileRNA","text":"Principal Component Analysis (PCA) useful technique illustrate sample distance emphasizes variation reduction dimensions data set. , introduce function plotSamplePCA():","code":"group <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",             \"Selfgraft\", \"Selfgraft\", \"Selfgraft\")  plotSamplePCA(sRNA_data, group)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"hierarchical-clustered-heatmap-to-assess-sample-distance","dir":"Articles","previous_headings":"Analysis > Step 2: Quality control","what":"Hierarchical clustered heatmap to assess sample distance","title":"Analyse sRNA populations using mobileRNA","text":"Similarly, PCA plot, plotSampleDistance() function undertakes hierarchical clustering unbiased log transformation calculate sample distance plotted form heatmap.","code":"plotSampleDistance(sRNA_data)"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"plot-the-distribution-of-rna-classes-within-each-sample","dir":"Articles","previous_headings":"Analysis > Step 2: Quality control","what":"Plot the distribution of RNA classes within each sample","title":"Analyse sRNA populations using mobileRNA","text":"Explore number RNA class identified within sample using RNAdistribution function produces table plots results. results can plotted either bar chart (style = “bar”) line graph (style = “line”) sample can shown bar chart facet (facet = TRUE) single line graph, line represents sample (together=TRUE). Alternatively, results can plotted individually sample either format. Lets look plot data:","code":"sample_distribution <- RNAdistribution(sRNA_data,                                             style = \"line\",                                             together = FALSE) # view plot  sample_distribution$plot  # view data  sample_distribution$data #>    Class heterograft_1 heterograft_2 heterograft_3 selfgraft_1 selfgraft_2 #> 1:    20             9            14             7           8          13 #> 2:    21            27            28            24          25          26 #> 3:    22            19            27            26          19          27 #> 4:    23            25            38            42          18          31 #> 5:    24           597           491           575         459         353 #>    selfgraft_3 #> 1:           6 #> 2:          22 #> 3:          26 #> 4:          35 #> 5:         437"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"step-3-calculate-the-consensus-of-each-srna-cluster","dir":"Articles","previous_headings":"Analysis","what":"Step 3: Calculate the consensus of each sRNA cluster","title":"Analyse sRNA populations using mobileRNA","text":"given sRNA cluster, replicate determined class (20-24nt) based abundant small RNA size. Replicates within condition expected class given sRNA similarly. RNAdicercall() function used define dicer class sRNA cluster based consensus across (specific) replicates.","code":"# calculate dicercall consensus  sRNA_data_summary <- RNAdicercall(data = sRNA_data,                                    tidy=TRUE) #> Calculating consensus dicercall based on information from all replicates #> The consensus dicercall will be excluded in the case of a tie #> Removing sRNA clusters with no consensus dicercall... # plot results  plot_distribution <- RNAdistribution(data = sRNA_data_consensus,                          consensus = TRUE) # View figure plot_distribution$plot"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"step-4-statistical-analysis-using-deseq2-or-edger","dir":"Articles","previous_headings":"Analysis","what":"Step 4: Statistical analysis using DESeq2 or edgeR","title":"Analyse sRNA populations using mobileRNA","text":"Statistical analysis can helpful understand differential abundances sRNA clusters found within system. can utilize either DESeq2 edgeR algorithms support analysis, can used next steps. add differential analysis values sRNA cluster working dataframe. can easily manipulate data plot heatmap.","code":"# sample conditions in order within dataframe groups <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",             \"Selfgraft\", \"Selfgraft\", \"Selfgraft\")  ## Differential analysis using the DEseq2 method  sRNA_DESeq2 <- RNAanalysis(data = sRNA_data_summary,                               group = groups,                               method = \"DESeq2\")  ## Differential analysis using the edgeR method   sRNA_edgeR <- RNAanalysis(data = sRNA_data_summary,                               group = groups,                               method = \"edgeR\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"step-5-explore-difference-in-srna-abundances","dir":"Articles","previous_headings":"Analysis","what":"Step 5: Explore difference in sRNA abundances","title":"Analyse sRNA populations using mobileRNA","text":"comparing treatment control conditions, might case sRNA clusters found within yet difference total abundance shared clusters. instance, given sRNA cluster samples treatment condition might greater abundance samples control condition. difference attribute observed differences. statistical analysis calculated log2FC values sRNA cluster comparing normalised counts treatment control. , positive log2FC indicates increased abundance transcripts given sRNA cluster treatment compared control, negative log2FC indicates decreased abundance transcripts given sRNA cluster. statistical significance log2FC determined (adjusted) pvalue also calculated previous step. filter data select sRNA clusters statistically significant, plot results heatmap compare conditions. Lets look plot:","code":"# select only signifcant sRNAs significant_sRNAs <- RNAsignificant(sRNA_DESeq2)  #plot p1 <- plotHeatmap(significant_sRNAs) p1$plot"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"step-6-identify-absolute-srna-population-difference","dir":"Articles","previous_headings":"Analysis","what":"Step 6: Identify absolute sRNA population difference","title":"Analyse sRNA populations using mobileRNA","text":"Finally, RNApopulation() function can utilised identify unique sRNA populations found treatment control condition. First lets look sRNA clusters unique treatment condition: Now, sRNA clusters unique control condition:","code":"# select sRNA clusters only found in treatment & not in the control samples treatment_reps <- c(\"heterograft_1\", \"heterograft_2\" , \"heterograft_3\") unique_treatment <- RNApopulation(data = sRNA_data_consensus,                                     conditions = treatment_reps)  # look at number of sRNA cluster only found in treatment  nrow(unique_treatment) #> [1] 148 # select sRNA clusters only found in control & not in the treatment samples control_reps <- c(\"selfgraft_1\", \"selfgraft_2\" , \"selfgraft_3\") unique_control <- RNApopulation(data = sRNA_data_consensus,                                     conditions = control_reps) # look at number of sRNA cluster only found in control   nrow(unique_control)  #> [1] 0"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"plotting-heterograft-only-srna-populations","dir":"Articles","previous_headings":"Analysis > Step 6: Identify absolute sRNA population difference","what":"Plotting heterograft-only sRNA populations","title":"Analyse sRNA populations using mobileRNA","text":"located 148 sRNA clusters uniquely present heterografts, found self-graft controls. results can plotted distribution plot heatmap. Lets look plots:","code":"# plot distribution of sRNA classes only found in treatment  p2 <- RNAdistribution(data = unique_treatment, style = \"line\", together = FALSE)  # plot heatmap of treatment-only sRNA clusters p3 <- plotHeatmap(data = unique_treatment) p2$plot   p3$plot"},{"path":[]},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"target-sequences","dir":"Articles","previous_headings":"Analysis > Step 6: Functional analysis","what":"Target sequences","title":"Analyse sRNA populations using mobileRNA","text":"sRNAs target complementary sequences genome mediate silencing via post-transcriptional pre-transcriptional mechanisms. identify complementary sequences matching abundant sRNA within cluster. dataframe can exported results loaded BLAST identify regions within genome complementary sequences present. tools, TargetFinder sRNATargetDigger, use predictive algorithm identify likely locations genome sRNAs might target. Lets export data frame :","code":"target_sequences <- RNAsequences(unique_treatment) #> The minimum number of matches required to form a consensus sRNA sequence is... 1 #> The consensus sRNA sequences will be choose at random in the case of a tie write.table(target_sequences, \"./data/mobile_sequences.txt\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"overlapping-regions","dir":"Articles","previous_headings":"Analysis > Step 6: Functional analysis","what":"Overlapping regions","title":"Analyse sRNA populations using mobileRNA","text":"Finally, can identify regions genome annotation sRNA cluster overlaps based chromosome start/end coordinated. can explored using two functions: [RNAattributes()] [RNAfeatures()]. RNAattributes function compared genome annotation sRNA clusters , overlap present, information joined. accomplished adding information annotation file sRNA working dataframe additional columns. RNAfeatures functions similar RNAattributes function, instead returns either absolute number percentage sRNA clusters overlap specific regions genome repeats, introns, exons, UTR promoter regions. helpful subset dataset explore specific sRNA class, see [mobileRNA::RNAsubset()] information.","code":"attributes <- RNAattributes(data = unique_treatment,                             annotation = \"./annotation/origin_annotation.gff3\") features <- RNAfeatures(data = unique_treatment,                             annotation = \"./annotation/origin_annotation.gff3\",                        repeats = \"./annotation/origin_annotation_repeats.gff3\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/articles/mobileRNA_standard.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Analyse sRNA populations using mobileRNA","text":"","code":"sessionInfo() #> R version 4.0.2 (2020-06-22) #> Platform: x86_64-apple-darwin17.0 (64-bit) #> Running under: macOS  10.16 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8 #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] mobileRNA_0.99.0 BiocStyle_2.16.1 #>  #> loaded via a namespace (and not attached): #>   [1] colorspace_2.0-3            rprojroot_2.0.2             #>   [3] DNAcopy_1.62.0              XVector_0.28.0              #>   [5] GenomicRanges_1.40.0        fs_1.5.2                    #>   [7] rstudioapi_0.14             farver_2.1.0                #>   [9] listenv_0.8.0               audio_0.1-10                #>  [11] affyio_1.58.0               ggrepel_0.9.1               #>  [13] bit64_4.0.5                 AnnotationDbi_1.50.3        #>  [15] fansi_1.0.2                 codetools_0.2-18            #>  [17] splines_4.0.2               Repitools_1.34.0            #>  [19] doParallel_1.0.17           cachem_1.0.6                #>  [21] geneplotter_1.66.0          knitr_1.42                  #>  [23] jsonlite_1.8.4              Rsamtools_2.4.0             #>  [25] annotate_1.66.0             cluster_2.1.2               #>  [27] vsn_3.56.0                  pheatmap_1.0.12             #>  [29] BiocManager_1.30.16         compiler_4.0.2              #>  [31] Matrix_1.4-0                fastmap_1.1.0               #>  [33] limma_3.44.3                cli_3.6.0                   #>  [35] beepr_1.3                   htmltools_0.5.5             #>  [37] tools_4.0.2                 gtable_0.3.0                #>  [39] glue_1.6.2                  GenomeInfoDbData_1.2.3      #>  [41] affy_1.66.0                 dplyr_1.1.2                 #>  [43] Rcpp_1.0.8.3                Biobase_2.48.0              #>  [45] jquerylib_0.1.4             pkgdown_2.0.7               #>  [47] vctrs_0.6.2                 Biostrings_2.56.0           #>  [49] preprocessCore_1.50.0       progressr_0.10.0            #>  [51] rtracklayer_1.48.0          iterators_1.0.14            #>  [53] xfun_0.37                   stringr_1.5.0               #>  [55] globals_0.14.0              lifecycle_1.0.3             #>  [57] gtools_3.9.2                XML_3.99-0.9                #>  [59] future_1.24.0               edgeR_3.30.3                #>  [61] zlibbioc_1.34.0             MASS_7.3-55                 #>  [63] scales_1.2.1                BSgenome_1.56.0             #>  [65] ragg_1.2.2                  parallel_4.0.2              #>  [67] SummarizedExperiment_1.18.2 RColorBrewer_1.1-2          #>  [69] yaml_2.3.5                  curl_4.3.2                  #>  [71] pbapply_1.7-0               memoise_2.0.1               #>  [73] ggplot2_3.4.2               sass_0.4.0                  #>  [75] stringi_1.7.6               RSQLite_2.2.10              #>  [77] highr_0.9                   genefilter_1.70.0           #>  [79] S4Vectors_0.26.1            desc_1.4.1                  #>  [81] foreach_1.5.2               Ringo_1.52.0                #>  [83] caTools_1.18.2              BiocGenerics_0.34.0         #>  [85] BiocParallel_1.22.0         truncnorm_1.0-8             #>  [87] GenomeInfoDb_1.24.2         rlang_1.1.0                 #>  [89] pkgconfig_2.0.3             systemfonts_1.0.4           #>  [91] matrixStats_0.61.0          bitops_1.0-7                #>  [93] Rsolnp_1.16                 evaluate_0.15               #>  [95] lattice_0.20-45             purrr_1.0.1                 #>  [97] labeling_0.4.2              GenomicAlignments_1.24.0    #>  [99] bit_4.0.4                   tidyselect_1.2.0            #> [101] parallelly_1.30.0           magrittr_2.0.3              #> [103] bookdown_0.32               DESeq2_1.28.1               #> [105] R6_2.5.1                    IRanges_2.22.2              #> [107] gplots_3.1.1                generics_0.1.2              #> [109] DelayedArray_0.14.1         DBI_1.1.2                   #> [111] withr_2.5.0                 pillar_1.9.0                #> [113] gsmoothr_0.1.7              RPushbullet_0.3.4           #> [115] survival_3.3-1              RCurl_1.98-1.6              #> [117] future.apply_1.8.1          tibble_3.2.1                #> [119] crayon_1.5.0                KernSmooth_2.23-20          #> [121] utf8_1.2.2                  rmarkdown_2.20              #> [123] locfit_1.5-9.4              grid_4.0.2                  #> [125] data.table_1.14.2           blob_1.2.2                  #> [127] SimDesign_2.10.1            digest_0.6.29               #> [129] xtable_1.8-4                tidyr_1.3.0                 #> [131] textshaping_0.3.6           stats4_4.0.2                #> [133] munsell_0.5.0               bslib_0.3.1                 #> [135] sessioninfo_1.2.2"},{"path":"https://kjeynescupper.github.io/mobileRNA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Katie Jeynes-Cupper. Maintainer, author. Marco Catoni. Author.","code":""},{"path":[]},{"path":[]},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Identify mobile RNA molecules in plant graft systems ","text":"mobileRNA R package provides pipeline rapid identification small RNA molecules. designed two key purposes; undertaken typical sRNAseq treatment control /identify endogenous mobile small RNA (sRNA) molecules plant graft systems. tool provides pipeline , separate vignettes, include pre-processing analysis sRNA sequencing data, soon mRNA sequencing data. established many different substances molecules including RNAs can travel shoot roots plants. Many studies utilized grafting, method can used also join different species together. Plant heterograft systems chimeric, comprised two genotypes joined graft junction; hence, molecules produces encoded genotype might exchanged across graft junction. molecules implications regulation gene expression trait acquisition. instance, sRNAs linked epigenetic pathways, RNA-directed DNA methylation pathway post-transcriptional gene silencing, implications gene regulatory patterns. Changes sRNA populations instigate facilitate grafting-induced traits, improved plant vigour. identification mobile sRNAs genotypes, current methods utilize step-wise mapping samples genome within graft system. , introduce new mapping method align sample replicates merge genome reference comprised genome assemblies relating genotypes heterograft system. quick-start guide identification mobile sRNAs chimeric system  undertake sRNAseq analysis treatment vs control, please see vignettes. Look-Version 2 accommodates mRNA movement","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Identify mobile RNA molecules in plant graft systems ","text":"Katie Jeynes-Cupper, University Birmingham, kej031@student.bham.ac.uk","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Identify mobile RNA molecules in plant graft systems ","text":"Installation Loading Test Data Getting Help Summary Merging Genome Assemblies Auto-Detection sRNA Cluster Mapping Analysis Output Functional Analysis Optional Extras","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Identify mobile RNA molecules in plant graft systems ","text":"latest version package can install directly GitHub repo:","code":"if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"KJeynesCupper/mobileRNA\", ref = \"main\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"loading-test-data","dir":"","previous_headings":"","what":"Loading Test Data","title":"Identify mobile RNA molecules in plant graft systems ","text":"simulate usage package, grafting data set, tomato-eggplant grafting experiment. data already undertaken pre-mapping mapping steps (pre-processing) can found sRNA_data. data set already organised RNAimport() function available package. load data set, use following command:","code":"data(\"sRNA_data\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Identify mobile RNA molecules in plant graft systems ","text":"additional information function, please read documentation mobileRNA package typing ? help operator function names package using help() function. -depth step--step analysis, consider reading vignette provided package:","code":"vignette(\"mobileRNA\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Identify mobile RNA molecules in plant graft systems ","text":"identify potentially mobile sRNA molecules genotypes, workflow shown figure right. begin R-Studio merge two genome assemblies one, pre-processing moves Linux align replicate merged reference back R-Studio undertake analysis identify potentially mobile RNA species. demonstrate simple 3-step process involving importation data, calculation dicercall consensus sRNA cluster, filtering potentially mobile molecules. analysis observe sRNA difference treatment control single genotype, workflow slight modification. Firstly, working single genome, hence, step merge two assemblies together required. recommend pre-process still follows two-steps auto-detection sRNA cluster mapping ShortStack. analysis, recommend undertaking statistical analysis (function: RNAanalysis()), exploring differences sRNA abundance whether unique populations within treatment control replicates. either analysis, also optional extras can explores vignettes. advanced analysis mobile sRNAs chimeric systems, view mobileRNA - Identify sRNAseq data locate potentially mobile sRNAs  genotypes using mobileRNA vignette. , advanced analysis sRNA populations non-grafted grafted system species, view mobileRNA_standard - Analyse sRNA populations using mobileRNA vignette. Going forward,assume standard quality control steps raw samples completed (.e. trimming adapters low quality reads)","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"merging-genome-assemblies","dir":"","previous_headings":"","what":"Merging Genome Assemblies","title":"Identify mobile RNA molecules in plant graft systems ","text":"method built aligning samples merged reference genome, comprised genome assemblies relating genotypes heterograft system. Merge two genomes assemblies single file using function R .","code":"merged_reference <- RNAmergeGenomes(genomeA = \"./workplace/reference/ref1.fa\",                                     genomeB = \"./workplace/reference/ref2.fa\",                         out_dir = \"./workplace/reference/merge/merged_ref.fa\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"auto-detection-of-srna-cluster","dir":"","previous_headings":"","what":"Auto-Detection of sRNA Cluster","title":"Identify mobile RNA molecules in plant graft systems ","text":"identify build list sRNA clusters within sample assist mapping step later ensure consistency across analysis. recommend installing ShortStack (https://github.com/MikeAxtell/ShortStack) program detect sRNA clusters align sRNAseq samples.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"step-1---cluster-analysis-with-shortstack","dir":"","previous_headings":"Auto-Detection of sRNA Cluster","what":"Step 1 - Cluster analysis with ShortStack","title":"Identify mobile RNA molecules in plant graft systems ","text":"","code":"ShortStack \\ --readfile <control_1.fastq> \\ --genomefile <merged_reference.fa> \\ --bowtie_cores 6 \\ --mmap n \\ --mismatches 0 \\ --nohp \\ --outdir <./output/directory>"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"step-2---build-srna-cluster-list","dir":"","previous_headings":"Auto-Detection of sRNA Cluster","what":"Step 2 - Build sRNA cluster list","title":"Identify mobile RNA molecules in plant graft systems ","text":"Now, collate sRNA loci information sample text file.","code":"# location of step 1 output folder <- <./output/directory/from/step/1/>  # name and location to save output file to (must be .txt) save_folder <- <./output/directory/ClustersInfo.txt>  # names of samples (ie. folder names) sample_names <- c(\"<treatment_1>\", \"<treatment_2>\", \"<control_1>\",\"<control_2>\")   loci_info <- RNAloci(files = folder,               out = save_folder,              samples = sample_names)"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"mapping","dir":"","previous_headings":"","what":"Mapping","title":"Identify mobile RNA molecules in plant graft systems ","text":"sample mapped merged reference genome list sRNA clusters.","code":"ShortStack \\ --readfile <control_1.fastq> \\ --genomefile <merged_reference.fa> \\ --locifile <./output/directory/ClustersInfo.gff3> \\ --bowtie_cores 6 \\ --mmap n \\ --mismatches 0 \\ --nohp \\ --mincov 5 \\ --outdir <./output/directory/step2/>"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"analysis","dir":"","previous_headings":"","what":"Analysis","title":"Identify mobile RNA molecules in plant graft systems ","text":"aligned data can now analysed R, potential mobile sRNA can identified.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"step-1-import-data","dir":"","previous_headings":"Analysis","what":"Step 1: Import data","title":"Identify mobile RNA molecules in plant graft systems ","text":"State location mapping results, sample names type data.","code":"# Directory containing results results_dir <-  \"<./output/directory/step2/>\"  # Sample names and total number of reads, in the same order.  sample_names <- c(\"<treatment_1>\", \"<treatment_2>\", \"<control_1>\",\"<control_2>\")   sRNA_data <- RNAimport(input = \"sRNA\",                         directory = results_dir,                        samples = sample_names)"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"step-2-calculate-the-consensus-of-each-srna-cluster-dicercall","dir":"","previous_headings":"Analysis","what":"Step 2: Calculate the consensus of each sRNA cluster dicercall","title":"Identify mobile RNA molecules in plant graft systems ","text":"given sRNA cluster, replicate determined dicercall, also known sRNA class (20-24nt), based abundant small RNA size. Replicates within condition expected class given sRNA similarly. RNAdicercall() function used define class sRNA cluster based consensus across specific replicates. identify foreign mobile sRNAs, recommended base consensus dicercall heterograft samples. ensure sRNA class accurately defined genotype originates . , replicates “treatment_1” “treatment_2” represent two heterograft samples, “control_1” “control_2” represent self-graft samples.","code":"samples <- c(\"<treatment_1>\", \"<treatment_2>\")  sRNA_data_summary <- RNAdicercall(data = sRNA_data,                                   conditions = samples,                                   tidy=TRUE)"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"step-3-identify-potential-mobile-srna","dir":"","previous_headings":"Analysis","what":"Step 3: Identify potential mobile sRNA","title":"Identify mobile RNA molecules in plant graft systems ","text":"Finally, RNAmobile() function filters dataset retain sRNA clusters mapped -genome. important, genome distinguishable chromosome names, hence, example -genome contains “” chromosome number.","code":"# define control samples controls <- c(\"<control_1>\", \"<control_2>\")  mobile_df <- RNAmobile(data = sRNA_data_summary,                      controls = controls,                     id = \"A\",                      task = \"keep\")  # output dataframe containing potentially mobile sRNAs output <- mobile_df  # save output as txt file  write.table(output, \"./output.txt\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"output","dir":"","previous_headings":"","what":"Output","title":"Identify mobile RNA molecules in plant graft systems ","text":"dataframe rows represent potential mobile sRNA clusters. columns include information cluster, individual sample replicates, .","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"information-on-the-cluster","dir":"","previous_headings":"Output","what":"Information on the cluster:","title":"Identify mobile RNA molecules in plant graft systems ","text":"chr: Name chromosome scaffold start : Start position cluster end : End position cluster width : Length locus (base-pairs)","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"information-on-each-sample-replicate","dir":"","previous_headings":"Output","what":"Information on each sample replicate:","title":"Identify mobile RNA molecules in plant graft systems ","text":"cluster: Cluster Name Dicer-call : size abundant small RNA size Count : Number uniquely aligned (e.g. multi-mapping) reads overlap locus. RPM : Reads per Million","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"other-information","dir":"","previous_headings":"Output","what":"Other information","title":"Identify mobile RNA molecules in plant graft systems ","text":"DicerConsensus : Consensus sRNA class calculated RNAdicercall() annotation file imported overlapped using RNAattributes(): source : name program generated feature, data source (database project name) feature : feature type name, e.g. Gene, Variation, Similarity score : floating point value strand : defined + (forward) - (reverse) frame : One ‘0’, ‘1’ ‘2’. ‘0’ indicates first base feature first base codon, ‘1’ second base first base codon, attribute : semicolon-separated list tag-value pairs, providing additional information feature. differential expression analysis undertaken withRNAanalysis(): log2FoldChange : Log2FoldChange–effect size estimate pvalue : P value, probability assumption effect difference, obtaining result equal extreme actually observed padjusted : p-value adjustment logCPM : log counts per million, measure expression level mean RPM Count calculated RNAmean(): - mean_RPM : mean RPM, based parameters - mean_Count : mean counts, based parameters","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"functional-analysis","dir":"","previous_headings":"","what":"Functional Analysis","title":"Identify mobile RNA molecules in plant graft systems ","text":"now retrieved list potentially mobile sRNA molecules want identify whether play role biological system. Small interfering RNAs (siRNAs) length 24-nucleotides, known play role RNA-directed DNA methylation pathway via targeting complementary sequencing DNA. Using genomic location sRNA clusters can identify overlaps genome origin tissue predict implication mobile sRNA. function returns input dataframe additional fields overlaps located:  can also locate specific genomic features overlap sRNA cluster locus including promoter regions, exon, introns, untranslated regions repeat regions: Lastly, lets extract sRNA cluster sequences.can utilised BLAST, plant sRNA target prediction tools TargetFinder (https://github.com/carringtonlab/TargetFinder) overlapped mRNAseq data identify complementary sequences elucidate potential function sRNAs. RNAsequences function identifies whether abundant sRNA consistent across replicates, , extracts sRNA nucleotide sequence calculates RNA DNA complementary sequences, well stating length sequence.","code":"mobile_df_attributes <- RNAattributes(data = mobile_df,                             annotation = \"./annotation/origin_annotation.gff3\") mobile_df_features <- RNAfeatures(data = mobile_df,                             annotation = \"./annotation/origin_annotation.gff3\",                        repeats = \"./annotation/origin_annotation_repeats.gff3\") mobile_sequences <- RNAsequences(mobile_df)  # save output as txt file  write.table(output, \"./output.txt\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/index.html","id":"optional-extras","dir":"","previous_headings":"","what":"Optional Extras","title":"Identify mobile RNA molecules in plant graft systems ","text":"package also includes functions : Exploratory quality control analysis, PCA & heatmap plots. Summary values including RPM mean Count mean across specific samples. Plot distribution sRNA classes (20-24nt) across individual replicates across dataset. Statistical analysis using differential methods either DESeq2 edgeR. package workflow can easily manipulated enable identification local populations RNA species. ———————————————————————— Last updated: 06-06-2023","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAanalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Expression (DE) Analysis of sRNA dicer-derived clusters\nusing DESeq2 or edgeR — RNAanalysis","title":"Differential Expression (DE) Analysis of sRNA dicer-derived clusters\nusing DESeq2 or edgeR — RNAanalysis","text":"function allows compute differential expression sRNA dicer-derived clusters. function allows choice analysis DESeq2 edgeR.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAanalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Expression (DE) Analysis of sRNA dicer-derived clusters\nusing DESeq2 or edgeR — RNAanalysis","text":"","code":"RNAanalysis(data, group, method = c(\"edgeR\", \"DESeq2\"), dispersionValue = NULL)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAanalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Expression (DE) Analysis of sRNA dicer-derived clusters\nusing DESeq2 or edgeR — RNAanalysis","text":"data numeric data frame produced RNAimport() /RNAsubset(). group Vector condition (ie. treatment control) sample. Must stated order samples data file left right. method method undertaken differential analysis, choose methods either DESeq2::DESeq edgeR::edgeR. Must stated either \"DESeq2\" \"edgeR\" function. dispersionValue numeric value; manual setting dispersion value recommended analysis experiments without biological replicates utilising edgeR::edgeR method.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAanalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Expression (DE) Analysis of sRNA dicer-derived clusters\nusing DESeq2 or edgeR — RNAanalysis","text":"Undertakes differential analysis, based specified method, adds results supplied dataframe. includes: Count mean Log fold change p-value Adjusted p-value Log counts per million (CPM/RPM)","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAanalysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential Expression (DE) Analysis of sRNA dicer-derived clusters\nusing DESeq2 or edgeR — RNAanalysis","text":"analysis allows users choose method best suits data. Notably, DESeq2 compute analysis one replicate per condition, , edgeR can. Simply set suitable dispersion value, based similar data, use feature. dispersion value wise known common Biological squared coefficient variation. typical dispersion value 0.4 human data sets, 0.1 data genetically identical model organisms 0.01 technical replicate. See User’s Guide  ‘EdgeR’ package details, edgeR::edgeR.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAanalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Expression (DE) Analysis of sRNA dicer-derived clusters\nusing DESeq2 or edgeR — RNAanalysis","text":"","code":"data(\"sRNA_data_consensus\") # sample conditions. groups <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",           \"Selfgraft\", \"Selfgraft\", \"Selfgraft\")   ## Differential analysis: DEseq2 method sRNA_DESeq2 <- RNAanalysis(data = sRNA_data_consensus,                              group = groups,                              method = \"DESeq2\" ) #> using pre-existing size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing   ## Differential analysis: edgeR method sRNA_edgeR <- RNAanalysis(data = sRNA_data_consensus,                             group = groups,                             method = \"edgeR\" ) #> Design matrix not provided. Switch to the classic mode."},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAattributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify specific attributes associated to a sRNA cluster — RNAattributes","title":"Identify specific attributes associated to a sRNA cluster — RNAattributes","text":"Based genomic coordinates, assign sRNA clusters annotation exact match based chromosome number, start end coordinates","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAattributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify specific attributes associated to a sRNA cluster — RNAattributes","text":"","code":"RNAattributes(data, annotation)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAattributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify specific attributes associated to a sRNA cluster — RNAattributes","text":"data data frame; containing rows potential dicer-derived clusters including columns supply genomic coordinates, chr supplies chromosome number, start end supply coordinates. annotation path, URL, connection GFFFile object. genome reference annotation file (.gff/.gff1/.gff2/.gff3).","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAattributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify specific attributes associated to a sRNA cluster — RNAattributes","text":"Adds additional columns GFF containing information overlaps sRNA cluster loci. columns represent standard columns GFF file.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAattributes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify specific attributes associated to a sRNA cluster — RNAattributes","text":"function merges annotation (.gff/.gff3) file sRNA data set based chromosome, start end coordinates. important alteration made genome reference (FASTA), alterations chromosome name, must carried forth genome annotation file. alterations made reference genome using RNAmergeGenomes() function, alteration inline can accomplished using RNAmergeAnnotations() function.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAattributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify specific attributes associated to a sRNA cluster — RNAattributes","text":"","code":"if (FALSE) {  data(\"sRNA_data\")  attributes_df <- RNAattributes(data = sRNA_data,                     annotation = \"./annotation/merged_annotation.gff3\")    }"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdicercall.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the sRNA dicer consensus for each dicer-derived sRNA cluster — RNAdicercall","title":"Define the sRNA dicer consensus for each dicer-derived sRNA cluster — RNAdicercall","text":"Using data, function uses supplied dataframe adds additional column stating consensus sRNA class dicer-derived cluster.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdicercall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the sRNA dicer consensus for each dicer-derived sRNA cluster — RNAdicercall","text":"","code":"RNAdicercall(   data,   conditions = NULL,   ties.method = NULL,   tidy = FALSE,   chimeric = FALSE,   controls = NULL,   genome.ID = NULL )"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdicercall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the sRNA dicer consensus for each dicer-derived sRNA cluster — RNAdicercall","text":"data data frame object containing sample data rows represent sRNA dicer-derived clusters, columns represent sample data. See RNAimport() load data, extract required information sample organise required. conditions character vector; containing names sample replicates. Named replicates used calculate dicercall consensus. string represent sample name present dataframe supplied data argument. ties.method character string specifying ties handled, \"exclude\" default. Options include \"random\", \"exclude\"; see ‘Details’ tidy use argument remove sRNA clusters unknown unclassified consensus result. default, function tidy data. tidy=TRUE, unclassified clusters remove output dataframe effort remove excess background noise. chimeric logical; state whether system chimeric: contains multiple genomes/genotypes. controls character; vector control condition sample names. genome.ID character; chromosome identifier foreign genome chimeric system","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdicercall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define the sRNA dicer consensus for each dicer-derived sRNA cluster — RNAdicercall","text":"data frame containing existing columns input data object, plus, two additional columns data: first column, DicerCounts contains number replicates defined dicer-derived sRNA class (based conditions). can utilised within RNAmobile function threshold parameter. second, labeled DicerConsensus states consensus sRNA class 20-24 nucleotides length \"N\" unclassified.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdicercall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define the sRNA dicer consensus for each dicer-derived sRNA cluster — RNAdicercall","text":"function calculates consensus sRNA class based conditions supplied. ties.method = \"random\", per default, ties broken random. case, determination tie assumes entries probabilities: relative tolerance 1e-5, relative largest (magnitude, omitting infinity) entry row. ties.method = \"exclude\", ties sRNA classification ruled unclassified (\"N\"). remove excess data noise, tidy=TRUE can used removed unclassified (\"N\") sRNA clsuters, resulting reduced dataset size. working chimeric system, example interspecific grafting, mapping errors can easily recognised eliminated. , can eliminated supplying extra parameter information. State chimeric=TRUE supply chromosome identifier foreign genome (ie. tissue sample genotype, genotype potential mobile molecules traveling ) genome.ID parameter & control condition samples names controls parameter.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdicercall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define the sRNA dicer consensus for each dicer-derived sRNA cluster — RNAdicercall","text":"","code":"data(\"sRNA_data\")  # define consensus sRNA classes. conditions <- c(\"heterograft_1\", \"heterograft_2\", \"heterograft_3\")  # Run function to define sRNA class for each cluster. sRNA_data_consensus <- RNAdicercall(data = sRNA_data,                                   conditions = conditions,                                   tidy=TRUE) #> Calculating consensus dicercall based on information from select replicates #> The consensus dicercall will be excluded in the case of a tie #>  #> Removing sRNA clusters with no consensus dicercall..."},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the distribution of sRNA lengths — RNAdistribution","title":"Plot the distribution of sRNA lengths — RNAdistribution","text":"RNAdistribution plots distribution dicer-derived sRNA classes (20-24nt) across samples across sRNA consensus determined function RNAdicercall().","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the distribution of sRNA lengths — RNAdistribution","text":"","code":"RNAdistribution(   data,   samples = NULL,   style,   facet = TRUE,   facet.arrange = 3,   colour = \"black\",   together = TRUE,   consensus = FALSE,   relative = FALSE )"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the distribution of sRNA lengths — RNAdistribution","text":"data dataframe, one following functions already called: RNAimport(),RNAdicercall(). samples character vector. Store names samples analyse plot. Argument required plotting individual sample replicates, either individually, overlapped together facet. Use sample replicate names present data frame (data), select samples wish plot. required plotting sRNA consensus using argument total=TRUE. style plotting option choose style either line graph bar chart represent data. style=\"line\" line graph produced style=\"bar\" produces bar graph style=\"consensus\" produces line graph consensus sRNA conjunction consensus=TRUE facet Logical; forms matrix panels defined row column faceting variables. plots results sample bar-chart contains within single plot. number rows facet can changed using argument facet.arrange. Default facet = TRUE , plots sample separately facet = FALSE . facet.arrange numeric; value supplied define number columns include facet. argument piped  ncol  argument ggplot2::facet_wrap() define number columns. default, set 3. colour bar plot fill colour. Default colour \"black\". together Logical; forms single line graph multiple lines represent sample replicates. Default together=TRUE. consensus Logical; plots distribution sRNA classes across identified dicer-derived clusters based consensus. See RNAdicercall() function calculate consensus RNA class based experimental replicates. Default consensus=FALSE. relative Logical; calculates relative frequency consensus dicer-derived sRNA clusters. applicable  conjunction argument consensus, set consensus=TRUE. default, relative=FALSE.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the distribution of sRNA lengths — RNAdistribution","text":"function returns list containing results form data frame plot(s). access element, simply use \"$\" symbol, elements \"data\" \"plot\" appear. samples argument allows uses plot specific samples single plot (facet bar plot line graph). can encourage closer comparison sample replicates.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdistribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the distribution of sRNA lengths — RNAdistribution","text":"function can used plot variety different comparisons plots. can used plot distribution sRNA classes within sample replicate, can represented bar chart style=\"bar\" line graph style=\"line\". plots can represented individually single plot facet facet=\"TRUE\" default. plot sRNA dicer-derived clusters identified sample, function extracts information RNA summary data calculates total number RNA class identified within sample, samples. Alternatively, function allows plot line graph sample together, overlapped single graph total=\"TRUE\". option bar plots. final option, plot total consensus dicer-derived sRNA clusters across experimental conditions, function pulls consensus call column created RNAdicercall() function working data frame.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAdistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the distribution of sRNA lengths — RNAdistribution","text":"","code":"data('sRNA_data')  p1 <- RNAdistribution(data = sRNA_data, style = \"line\")  p1.2 <- RNAdistribution(data = sRNA_data, style = \"line\",                         samples = c(\"heterograft_1\", \"heterograft_2\",                         \"heterograft_3\")) p2 <- RNAdistribution(data = sRNA_data, style = \"line\", together =FALSE )  p3 <- RNAdistribution(data = sRNA_data, style = \"bar\")  p3.2 <- RNAdistribution(data = sRNA_data, style = \"bar\",                        samples = c(\"heterograft_1\", \"heterograft_2\",                        \"heterograft_3\"))  p4 <- RNAdistribution(data = sRNA_data, style = \"bar\", facet = FALSE) #> $heterograft_1  #>  #> $heterograft_2  #>  #> $heterograft_3  #>  #> $selfgraft_1  #>  #> $selfgraft_2  #>  #> $selfgraft_3  #>   p5 <- RNAdistribution(data = sRNA_data, style = \"bar\",                       facet = TRUE, facet.arrange = 2 )  data(\"sRNA_data_consensus\") p6 <- RNAdistribution(data = sRNA_data_consensus, consensus = TRUE)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAfeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution of sRNA cluster loci across genomic features — RNAfeatures","title":"Distribution of sRNA cluster loci across genomic features — RNAfeatures","text":"Calcularepeats percentage sRNA dicer-derived clusters overlap genomic features, including 2-kb promoter regions, repeat regions, exons, introns, 3'/'5 untranslated regions.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAfeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution of sRNA cluster loci across genomic features — RNAfeatures","text":"","code":"RNAfeatures(   data,   annotation,   repeats = NULL,   promoterRegions = 2000,   percentage = TRUE )"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAfeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution of sRNA cluster loci across genomic features — RNAfeatures","text":"data data frame; containing rows potential dicer-derived clusters including columns supply genomic coordinates, chr supplies chromosome number, start end supply start end coordinates. annotation path, URL, connection GFFFile object. genome reference annotation file (.gff/.gff1/.gff2/.gff3). repeats path, URL, connection GFFFile object. genome reference annotation file, specifically contains information repeat sequences genome (.gff/.gff1/.gff2/.gff3). default, required, however specific repeats annotation file genome suggested supply . promoterRegions numeric; define promoter region upstream genes. Default promoterRegions=2000 , ie promoters set 2kb upstream genes percentage returns results percentage total, percentage = TRUE (default). percentage = FALSE, results returned count value representing number sRNA clusters overlap given genomic feature.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAfeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution of sRNA cluster loci across genomic features — RNAfeatures","text":"Returns table containing number percentage overlaps supplied dataset specific regions genome annotation genes, repeats, introns, exons.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAfeatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution of sRNA cluster loci across genomic features — RNAfeatures","text":"function calculates number percentage sRNA dicer-derived clusters overlap genomic features based genomic coordinates. outputted either matrix data frame, respectively. function can utilised different steps analysis, particularly powerful observing genomic location potential mobile sRNA, can overlapped specific genome rather merged annotation file.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAfeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution of sRNA cluster loci across genomic features — RNAfeatures","text":"","code":"if (FALSE) {  dis_features <- RNAfeatures(data = sRNA_data_consensus,                        annotation = \"./annotation/eggplant_genome.gff3\",                        repeats = \"./annotation/eggplant_genome_repeats.gff3\") }"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAimport.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and organise sRNAseq or mRNA data sets — RNAimport","title":"Import and organise sRNAseq or mRNA data sets — RNAimport","text":"Load organise either sRNAseq mRNAseq results single dataframe containing experimental replicates specified rows represent either sRNA locus gene, respectively.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAimport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import and organise sRNAseq or mRNA data sets — RNAimport","text":"","code":"RNAimport(input = c(\"sRNA\", \"mRNA\"), directory, samples, tidy = TRUE)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAimport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import and organise sRNAseq or mRNA data sets — RNAimport","text":"input string; define type Next-Generation Sequencing dataset originates , either \"sRNA\" \"mRNA\" valid inputs. directory Path directory containing sample folders. NOTE: Following suggested pre-processing steps, can found second alignment folders. samples Vector characters naming sample names correlating outputted folders located `directory` argument path. tidy Logical; removes genes analysis zero counts across replicates.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAimport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import and organise sRNAseq or mRNA data sets — RNAimport","text":"dataframe rows represent sRNA clusters columns represent replicate information. Replicate information includes Dicercall, Counts, RPM MajorRNA sequence. replicate information distinguishable replicate name ajoined prefix column name.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAimport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import and organise sRNAseq or mRNA data sets — RNAimport","text":"Supply directory folder storing various sample replicate folders produced ShortStack analysis. Within sample replicate folder, \"Result.txt\". file contains many different columns, analysis columns interest  \"Locus\", \"DicerCall\", \"Reads\", \"RPM\" imported loads new data frame. Note \"Reads\" converted \"Counts\" output function. Locus contains genomic locations clusters, Dicercall contains likely size cluster, Reads contains number reads mapped cluster (recommended use unique mapping, hence number uniquely mapped reads, ie, including multimapped reads). Lastly, RPM contains Reads per Million score. \"RNAimport\" takes results  pre-processed sRNAseq data mapped undertaken cluster analysis ShortStack, organises single data frame. row represent sRNA dicer-derived cluster within analysis columns 1 - 5 supply information cluster including locus, separated coordinates (chromosome, start, end) cluster name. columns represent data imported samples including DicerCall, Counts RPM. DicerCall represents size abundant small RNA size based parameter used ShortStack. Count column represents number aligned sRNA-seq reads overlap locus. RPM represents reads per million. replicate included analysis, columns labeled type name sample, example, sample called \"Sample1\", information sample stored columns DicerCall_Sample1, Count_Sample1 RPM_Sample1.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAimport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import and organise sRNAseq or mRNA data sets — RNAimport","text":"","code":"if (FALSE) {  # import sRNAseq data df_sRNA <- RNAimport(input = \"sRNA\",                      directory = \"./analysis/sRNA_mapping_results/\",                      samples = c(\"heterograft_1\", \"heterograft_2\",                      \"heterograft_3\",\"selfgraft_1\" , \"selfgraft_2\" ,                      \"selfgraft_3\"))  # import mRNAseq data df_mRNA <- RNAimport(input = \"mRNA\",                      directory = \"./analysis/mRNA_counts/\",                      samples = c(\"heterograft_1\", \"heterograft_2\",                      \"heterograft_3\",\"selfgraft_1\" , \"selfgraft_2\" ,                      \"selfgraft_3\"))  } # The output of this function can be explore in the data object sRNA_data data(\"sRNA_data\") head(sRNA_data) #>                   Locus chr     start       end   Cluster #> 1 1:100000956-100001076   1 100000956 100001076 cluster_1 #> 2 1:100001486-100001554   1 100001486 100001554 cluster_2 #> 3 1:100001646-100001731   1 100001646 100001731 cluster_3 #> 4   1:10001034-10001073   1  10001034  10001073 cluster_4 #> 5 1:100011795-100011930   1 100011795 100011930 cluster_5 #> 6   1:10002000-10002065   1  10002000  10002065 cluster_6 #>   DicerCall_heterograft_1 Count_heterograft_1 RPM_heterograft_1 #> 1                      24                  19             1.908 #> 2                      24                   3             0.301 #> 3                       N                   3             0.301 #> 4                      24                   1             0.100 #> 5                      24                  11             1.105 #> 6                      24                   9             0.904 #>      MajorRNA_heterograft_1 DicerCall_heterograft_2 Count_heterograft_2 #> 1  AGUGACGGUCUCAUGUAACAUAGA                      24                  14 #> 2  AAAGAGUAGACAUAUAUUAAAUGG                      20                   5 #> 3 CUGUCUCAUGUGACACUCUUUCACU                      23                   6 #> 4  AAAUUGUCAUUUAGUCAGAGGAAU                       N                   0 #> 5  AUAGACAAAUCGCACUCGCUCUCG                      24                   2 #> 6  UUAGAUUUCUGGAGUAACAACUUU                       N                   2 #>   RPM_heterograft_2   MajorRNA_heterograft_2 DicerCall_heterograft_3 #> 1             1.803 AGUGACGGUCUCAUGUAACAUAGA                      24 #> 2             0.644     ACAUAUUUUUUUGGACGAAC                      24 #> 3             0.773  UCUGUCUCAUGUGACACUCUUUC                      24 #> 4             0.000                        N                      24 #> 5             0.258 AAGUGUCUACCCAUUGUGAUUCGC                      24 #> 6             0.258      UUAUUGACAAACUAUAACU                      22 #>   Count_heterograft_3 RPM_heterograft_3   MajorRNA_heterograft_3 #> 1                  30             2.953 AGUGACGGUCUCAUGUAACAUAGA #> 2                   1             0.098 UAUGUCUACUCUUUAUUACUCUCC #> 3                  11             1.083 AUCUUGUCAAGUGAAAGAGUGUCA #> 4                  11             1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                   5             0.492 AAUCACAAUGGGUAGACACUUAGA #> 6                   3             0.295 UUAGAUUUCUGGAGUAACAACUUU #>   DicerCall_selfgraft_1 Count_selfgraft_1 RPM_selfgraft_1 #> 1                    24                19           1.909 #> 2                    24                 3           0.301 #> 3                     N                 3           0.301 #> 4                    24                 1           0.100 #> 5                    24                11           1.105 #> 6                    24                 9           0.904 #>        MajorRNA_selfgraft_1 DicerCall_selfgraft_2 Count_selfgraft_2 #> 1  AGUGACGGUCUCAUGUAACAUAGA                    24                14 #> 2  AAAGAGUAGACAUAUAUUAAAUGG                    20                 5 #> 3 CUGUCUCAUGUGACACUCUUUCACU                    23                 6 #> 4  AAAUUGUCAUUUAGUCAGAGGAAU                     N                 0 #> 5  AAUGGGUAGACACUUAGAUACAUG                    24                 2 #> 6  UUAGAUUUCUGGAGUAACAACUUU                     N                 2 #>   RPM_selfgraft_2     MajorRNA_selfgraft_2 DicerCall_selfgraft_3 #> 1           1.804 AGUGACGGUCUCAUGUAACAUAGA                    24 #> 2           0.644     ACAUAUUUUUUUGGACGAAC                    24 #> 3           0.773  UCUGUCUCAUGUGACACUCUUUC                    24 #> 4           0.000                        N                    24 #> 5           0.258 AUAGACAAAUCGCACUCGCUCUCG                    24 #> 6           0.258  AGAUUUCUGGAGUAACAACUUUG                    22 #>   Count_selfgraft_3 RPM_selfgraft_3     MajorRNA_selfgraft_3 #> 1                30           2.954 AGUGACGGUCUCAUGUAACAUAGA #> 2                 1           0.098 UAUGUCUACUCUUUAUUACUCUCC #> 3                11           1.083 AUCUUGUCAAGUGAAAGAGUGUCA #> 4                11           1.083 AUUCCUCUGACUAAAUGACAAUUU #> 5                 5           0.492 AAUCACAAUGGGUAGACACUUAGA #> 6                 3           0.295   UUGACAAACUAUAACUUAAAUU"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAloci.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute complete list of sRNA dicer-derived cluster loci — RNAloci","title":"Compute complete list of sRNA dicer-derived cluster loci — RNAloci","text":"Collates identified sRNA dicer-derived clusters across multiple sample replicates.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAloci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute complete list of sRNA dicer-derived cluster loci — RNAloci","text":"","code":"RNAloci(files, out, samples)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAloci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute complete list of sRNA dicer-derived cluster loci — RNAloci","text":"files Path directory containing ShortStack mapping results. Path directory save outputted annotation files, include name output file, including file extension (.txt`) samples character vector containing names samples analysis. match sample folder names created mapping step one, outputted Shortstack.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAloci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute complete list of sRNA dicer-derived cluster loci — RNAloci","text":"plain text file (.txt) assigned variable, dataframe saved global environment. output contains two columns,Locus containing genomic coordinates dicer-derived cluster Cluster contains given name dicer-derived cluster.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAloci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute complete list of sRNA dicer-derived cluster loci — RNAloci","text":"Based output Shortstack, function pulls loci dicer-derived clusters within sample, supplied function, merges loci single data frame. function utilises ShortStack_All.gff3 file produced mapping clustering analysis ShortStack. function outputs data frame global environment assigned variable/object, regardless outputs data frame plain text file given directory.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAloci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute complete list of sRNA dicer-derived cluster loci — RNAloci","text":"","code":"if (FALSE) {   folder <- \"./workplace/alignment_unique_one/\" save_folder <- \"./workplace/reference/LociInfo.txt\"  conditions <- c(\"heterograft_1\",\"heterograft_2\",\"heterograft_3\",                  \"selfgraft_1\",\"selfgraft_2\", \"selfgraft_3\")   Loci_info <- RNAloci(files = folder,                     out = save_folder,                     samples = conditions)  }"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mean RPM and mean Count across given samples — RNAmean","title":"Calculate mean RPM and mean Count across given samples — RNAmean","text":"Using data, function calculates mean RPM Counts across specific samples.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mean RPM and mean Count across given samples — RNAmean","text":"","code":"RNAmean(data, conditions = NULL)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mean RPM and mean Count across given samples — RNAmean","text":"data data frame, see RNAimport() produce organised object sample data. conditions Character vector; represent sample names. supplied, function calculate means across samples dataframe.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mean RPM and mean Count across given samples — RNAmean","text":"data frame containing existing columns input data object, plus, additional columns. default, FPKM means stored column named mean_RPM, count means stored column names mean_Count.s","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mean RPM and mean Count across given samples — RNAmean","text":"","code":"data(\"sRNA_data\") # across specific samples selected_samples <- c(\"heterograft_1\", \"heterograft_2\", \"heterograft_3\")  means <- RNAmean(data = sRNA_data, conditions = selected_samples)  # for all samples means <- RNAmean(data = sRNA_data)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeAnnotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two GFF genome annotation files — RNAmergeAnnotations","title":"Merge two GFF genome annotation files — RNAmergeAnnotations","text":"Merges two genomes annotation files (GFF format) one single GFF file saved desired directory. Adds prefix chromosome name genome annotations ensure assembly distinguishable within merged file, saved individually altered references local directory.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeAnnotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two GFF genome annotation files — RNAmergeAnnotations","text":"","code":"RNAmergeAnnotations(   annotationA,   annotationB,   out_dir,   abbreviationAnnoA = \"A\",   abbreviationAnnoB = \"B\" )"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeAnnotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two GFF genome annotation files — RNAmergeAnnotations","text":"annotationA GRanges object; genome annotation assembly file GFF format. annotationB GRanges object; genome annotation assembly file GFF format. out_dir either character string base::connections() open writing. Place path output directory \"\", including file output name extension either .gff .gff3. abbreviationAnnoA string placed \"\", replace chromosome names within annotationA.Default set \"\". abbreviationAnnoB string placed \"\", replace chromosome names within annotationB.Default set \"B\".","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeAnnotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two GFF genome annotation files — RNAmergeAnnotations","text":"function output individually altered annotation files, plus, merged annotation file global environment given directory. altered annotation files contain either default custom alterations chromosome names written directory merged file, given names addition annotationA_altered.gff annotationB_altered.gff, respectively.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeAnnotations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge two GFF genome annotation files — RNAmergeAnnotations","text":"functions primary goal merge two GFF files, however, merging genomic files critical two genomes distinguishable chromosome names. default setting, function extracts chromosome names given GFF file adds ID chromosome name removes periods. default, function rename chromosome names annotationA \"\". example, A0, A1, A2 etc. set custom chromosome name annotationA alter argument abbreviationAnnoA. , annotationB default chromosome names named \"B\", example, B0, B1, B2 etc. set custom chromosome name annotationB alter argument abbreviationAnnoB. merged genome saved specified output directory, requires user set name gff extension. user must load annotations R Global Environment, hence, alterations made function alter variable. altered annotations also saved directory supplied output file, fixed output name annotationA_altered.gff annotationB_altered.gff, respectively. IMPORTANT:  genome reference annotation species must chromosomes matching names. critical used RNAmergeGenomes() function create merged reference genome,treat input annotations way.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeAnnotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two GFF genome annotation files — RNAmergeAnnotations","text":"","code":"# import GFF files into R  # Read reference genomes url_remote <- \"https://github.com/KJeynesCupper/assemblies/raw/main/\"  anno1_url <- paste0(url_remote,\"chr12_Eggplant_V4.1_function_IPR_final.gff\")  anno2_url <- paste0(url_remote, \"chr2_ITAG4.0_gene_models.gff\")   # Read in GFF files anno1 <- rtracklayer::import(anno1_url) anno2 <- rtracklayer::import(anno2_url)   # edit and merge merged_anno <- RNAmergeAnnotations(annotationA = anno1,                                  annotationB = anno2,              out_dir = \"./merged_annotation.gff3\") #> Adding abbreviations to chomosome names ...  #> New annotation file created: ./annotationA_altered.gff #> New annotation file created: ./annotationB_altered.gff #> Merging altered annotation files ...  ## Set specific pre-fixes: ###  annotationA represents Solanum melongena, so abbreviated to `SM` ###  annotationB represents Solanum lycopersicum, so abbreviated to `SL`  merged_anno_2 <- RNAmergeAnnotations(annotationA = anno1,annotationB = anno2,               out_dir = \"./merged_annotation.gff3\",               abbreviationAnnoA = \"SM\",abbreviationAnnoB = \"SL\") #> Adding abbreviations to chomosome names ...  #> New annotation file created: ./annotationA_altered.gff #> New annotation file created: ./annotationB_altered.gff #> Merging altered annotation files ..."},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeGenomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two FASTA genome assemblies — RNAmergeGenomes","title":"Merge two FASTA genome assemblies — RNAmergeGenomes","text":"Merges two reference genomes (.fa/.fasta). one single reference modified chromosome names ensure distinguishability.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeGenomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two FASTA genome assemblies — RNAmergeGenomes","text":"","code":"RNAmergeGenomes(   genomeA,   genomeB,   out_dir,   abbreviationGenomeA = \"A\",   abbreviationGenomeB = \"B\",   cores = TRUE,   number_cores = 4 )"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeGenomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two FASTA genome assemblies — RNAmergeGenomes","text":"genomeA path; directory path genome reference assembly file FASTA format (.fa/.fasta). genomeB path; directory path genome reference assembly file FASTA format (.fa/.fasta). out_dir either character string base::connections() open writing. Place path output directory \"\", including file output name. Output name must \".fa\" extension. abbreviationGenomeA string placed \"\", replace chromosome names within genomeA.Default set \"\". abbreviationGenomeB string placed \"\", replace chromosome names within genomeB.Default set \"B\". cores logical;  number CPU cores parallel computation. default, cores = TRUE tells system detect number CPU cores current host., cores = FALSE allows user defined number cores stored variable number_cores. number_cores numeric; number CPU cores use parallel computation.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeGenomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two FASTA genome assemblies — RNAmergeGenomes","text":"Returns single FASTA format file containing  genome assemblies edited chromosome names (prefixes, removal periods) give directory.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeGenomes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge two FASTA genome assemblies — RNAmergeGenomes","text":"Please aware function take long time process working large genomes together take 1Gb storage. Please patient allow function run. functions primary goal merge two FASTA files, however, merging genomic files critical two genomes distinguishable chromosome names. default setting, function extracts chromosome names given FASTA file alters name retaining identifying number. function requires input two reference genomes, one represents Genome-represents Genome-B. default, function rename chromosome names Genome-\"\". example, A0, A1, A2 etc. set custom chromosome name Genome-alter argument abbreviationGenomeA. ,  Genome-B default chromosome names named \"B\", example, B0, B1, B2 etc. set custom chromosome name Genome-alter argument abbreviationGenomeB. function can  draw chromosome number within given GFF file, remove prior character numerical values, replace supplied string. Please note function uses parallel computation using packages (parallel, foreach & doParallel) improve processing speed. Hence common errors may occur parallel computing going background. improve handling, function create number temporary files output directory, merged single file deleted. IMPORTANT:  genome reference annotation species must chromosomes matching names. critical used RNAmergeAnnotations() function create merged genome annotation,treat input references way.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmergeGenomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two FASTA genome assemblies — RNAmergeGenomes","text":"","code":"# URL for example genome assemblies  url_remote <- \"https://github.com/KJeynesCupper/assemblies/raw/main/\"   fasta_1 <- paste0(url_remote, \"chr12_Eggplant_V4.1.fa.gz\")   fasta_2 <- paste0(url_remote,\"chr2_S_lycopersicum_chromosomes.4.00.fa.gz\")   # run function to merge merged_ref <- RNAmergeGenomes(genomeA = fasta_1, genomeB = fasta_2,                                out_dir = \"../../merged_ref.fa\",                                 cores = FALSE,number_cores = 1) #> Replacing chromosome names #> Genomes have been successfully merged #> Attempting to save merged genome to: ../../merged_ref.fa #> Please be patient, this next step may take a long time ..  #> All temporary files have been created #> Merging temporary files ...  #> At this point get a cup of tea, its going to be a while ...  #> Deleting temporary files ...     ## or, to set specific changes to chromosome names:  # genomeA represents Solanum melongena and the chromosomes will be  # abbreviated to `SM. # genomeB represents Solanum lycopersicum and the chromosomes will be # abbreviated to `SL`.  merged_ref2 <- RNAmergeGenomes(genomeA = fasta_1,             genomeB = fasta_2 ,             out_dir = \"./merged_ref.fa\",             abbreviationGenomeA = \"SM\",             abbreviationGenomeB = \"SL\",              cores = FALSE, number_cores = 1) #> Replacing chromosome names #> Genomes have been successfully merged #> Attempting to save merged genome to: ./merged_ref.fa #> Please be patient, this next step may take a long time ..  #> All temporary files have been created #> Merging temporary files ...  #> At this point get a cup of tea, its going to be a while ...  #> Deleting temporary files ..."},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmobile.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify potential mobile sRNA molecules — RNAmobile","title":"Identify potential mobile sRNA molecules — RNAmobile","text":"function identify potential mobile small RNA molecules traveling one genotype another hetero-grafted system.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmobile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify potential mobile sRNA molecules — RNAmobile","text":"","code":"RNAmobile(   data,   controls,   genome.ID,   task = NULL,   statistical = FALSE,   padj = 0.05,   threshold = NULL,   p.value = NULL )"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmobile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify potential mobile sRNA molecules — RNAmobile","text":"data Numeric data frame controls Character vector; containing names control samples. genome.ID character string related chromosomes particular genome. distinguishing feature genome interest non-interest chromosome name (chr column). task option keep remove chromosomes containing identifying string. keep chromosomes ID, set task=keep. remove, set task=\"remove\". default, task set keep. statistical TRUE, undertake statistical filtering based p-value adjusted p-value threshold stated padj & p.value.Default set FALSE. Requires presence columns containing statistical data. order filter adjusted p-value, column named padjusted must present. Similarly, filter p-value, column named pvalue must present. See RNAanalysis() calculate statistical values. padj user defined numeric value represent adjusted p-value threshold define statistic significance. Defaults set 0.05.mobile molecules adjusted p-values equal lower specified returned. threshold numeric; set threshold level number replicates defined dicer-consensus. p.value user defined numeric value represent p-value threshold define statistic significance. default value, set instead using adjusted p-value filter molecules. mobile molecules p-values equal lower specified returned.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmobile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify potential mobile sRNA molecules — RNAmobile","text":"data-frame containing candidate mobile sRNAs, filtered based statistical significance ability -pass threshold determines number replicates defined dicer-consensus.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmobile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify potential mobile sRNA molecules — RNAmobile","text":"function undertakes two different roles. First, selects sRNA cluster mapped particular genome. either keeping removing sRNA mapped chromosomes. Hence, function work two genomes distinguishable chromosome names. second step, selecting clusters mapped genome interest, removes sRNA clusters incorrectly mapped. clusters counts RPM values control samples (ie. genome destination tissue hetero-graft condition). samples counts sRNA originates different genotype control. function also allows statistical analysis based results collect differential analysis total dataset using function RNAanalysis(). features enables filtering sRNA clusters meet specific p-value adjusted p-values. greater confidence mobile sRNA candidates can achieved setting threshold considers number replicates contributed defining consensus dicer-call (ie. consensus sRNA classification). parameter filters based DicerCount column introduced RNAdicercall() function.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAmobile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify potential mobile sRNA molecules — RNAmobile","text":"","code":"data(\"sRNA_data_consensus\")   # vector of control names controls <- c(\"selfgraft_1\", \"selfgraft_2\" , \"selfgraft_3\")  # Locate potentially mobile sRNA clusters associated to tomato, no # statistical analysis mobile_df1 <- RNAmobile(data = sRNA_data_consensus,                     controls = controls,                     genome.ID = \"SL40\",                     task = \"keep\",                     statistical = FALSE)     # Locate potentially mobile sRNA clusters associated to tomato, include  # statistical analysis  ## undertake statistical analysis with either edgeR or DESeq2, here we use # # DESeq2 groups <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",           \"Selfgraft\", \"Selfgraft\", \"Selfgraft\")  analysis_df <- RNAanalysis(data = sRNA_data_consensus,                              group = groups,                              method = \"DESeq2\" ) #> using pre-existing size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing  ## locate mobile sRNA using p-adjusted value mobile_df2 <- RNAmobile(data = analysis_df,                     controls = controls,                     genome.ID = \"SL40\",                     task = \"keep\",                     statistical = TRUE)  ## or, locate mobile sRNA using p-value value mobile_df3 <- RNAmobile(data = analysis_df,                     controls = controls,                     genome.ID = \"SL40\",                     task = \"keep\",                     statistical = TRUE,                     p.value = 0.05)    # Locate local sRNA clusters associated to eggplant, include statistical # analysis mobile_df4 <- RNAmobile(data = sRNA_data_consensus,                     controls = controls,                     genome.ID = \"SL40\",                     task = \"remove\",                     statistical = FALSE)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNApopulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify unique sRNA populations between treatment and control conditions — RNApopulation","title":"Identify unique sRNA populations between treatment and control conditions — RNApopulation","text":"Identify unique sRNA populations two conditions.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNApopulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify unique sRNA populations between treatment and control conditions — RNApopulation","text":"","code":"RNApopulation(   data,   conditions,   statistical = FALSE,   padj = 0.05,   p.value = NULL,   chimeric = FALSE,   controls = NULL,   genome.ID = NULL,   dual = TRUE )"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNApopulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify unique sRNA populations between treatment and control conditions — RNApopulation","text":"data Numeric data frame conditions Character vector; containing names samples within conditions locate unique sRNA clusters. statistical TRUE, undertake statistical filtering based p-value adjusted p-value threshold stated padj & p.value.Default set FALSE. Requires presence columns containing statistical data. order filter adjusted p-value, column named padjusted must present. Similarly, filter p-value, column named pvalue must present. See RNAanalysis() calculate statistical values. padj user defined numeric value represent adjusted p-value threshold define statistic significance. Defaults set 0.05.mobile molecules adjusted p-values equal lower specified returned. p.value user defined numeric value represent p-value threshold define statistic significance. default value, set instead using adjusted p-value filter molecules. mobile molecules p-values equal lower specified returned. chimeric logical; state whether system chimeric: contains multiple genomes/genotypes. controls character; vector control condition sample names. genome.ID character; chromosome identifier foreign genome chimeric system dual logical; works corporation chimeric=TRUE removes sRNA clusters mapped foreign genome.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNApopulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify unique sRNA populations between treatment and control conditions — RNApopulation","text":"refined version working dataframe supplied function. function selects sRNA clusters found replicates within condition supplied conditions argument replicates within dataset. Selection sRNA clusters meet statistical threshold can included, given statistical analysis undertaken using RNAanalysis() function.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNApopulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify unique sRNA populations between treatment and control conditions — RNApopulation","text":"Please aware large dataset, function may take couple minutes. function undertakes two different roles. First, identified whether unique sRNA clusters within one condition comparison another. instance, additional sRNA clusters treatment found control samples. Keep mind, function consider genome origin unlike RNAmobile() function. second role involves filtering data based statistical significance calculated RNAanalysis() function. optional features enables user select sRNA clusters meet specific p-value adjusted p-values threshold. working chimeric system, example interspecific grafting, mapping errors can easily recognised eliminated. , can eliminated supplying extra parameter information. State chimeric=TRUE supply chromosome identifier foreign genome (ie. tissue sample genotype, genotype potential mobile molecules traveling ) genome.ID parameter & control condition samples names controls parameter.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNApopulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify unique sRNA populations between treatment and control conditions — RNApopulation","text":"","code":"data(\"sRNA_data_consensus\")  # vector of control names reps <- c(\"heterograft_1\", \"heterograft_2\" , \"heterograft_3\")  heterograft_pop <- RNApopulation(data = sRNA_data_consensus,                                   conditions = reps)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract sRNA cluster sequences — RNAsequences","title":"Extract sRNA cluster sequences — RNAsequences","text":"Extract sRNA cluster sequences; identifies whether abundant sRNA sRNA cluster consistent across defined number replicates, extracts sRNA nucleotide sequence. function also calculates RNA & DNA complementary sequences, well stating length sequence. results can stored working dataframe supplied function stored new dataframe containing results function. includes: Match:  whether sRNA sequence consistent across replicates Sequence:  character; sequence abundant sRNA within cluster Complementary_RNA: character; complementary RNA nucleotide sequence Complementary_DNA: character; complementary DNA nucleotide sequence Width: numeric; length nucleotide sequence","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract sRNA cluster sequences — RNAsequences","text":"","code":"RNAsequences(   data,   original = FALSE,   match.threshold = 1,   duplicates = \"random\",   tidy = FALSE )"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract sRNA cluster sequences — RNAsequences","text":"data dataframe; containing columns starting Cluster & MajorRNA original logical; output results working date additional columns (original=TRUE), output new dataframe (original=FALSE). default, FALSE match.threshold numeric; minimum number replicates required share sRNA sequence count match duplicates character string define deal tie, \"random\" default. Options include \"random\" \"exclude\" tidy use argument remove sRNA clusters unknown unclassified consensus major sRNA sequence result. default, tidy=FALSE, tidy=TRUE sRNA clusters undetermined consensus removed.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract sRNA cluster sequences — RNAsequences","text":"results can stored working dataframe supplied function stored new dataframe containing results function. results includes: Match: whether sRNA sequence consistent across replicates Sequence:  character; sequence abundant sRNA within cluster Complementary_RNA: character; complementary RNA nucleotide sequence Complementary_DNA: character; complementary DNA nucleotide sequence Width: numeric; length nucleotide sequence","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsequences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract sRNA cluster sequences — RNAsequences","text":"default, function checks whether sample dataset shares major sRNA sequence given sRNA cluster. least two replicates share sRNA sequence, sequence pulled complementary DNA RNA sequences calculated. Using match.threshold parameter, can alter minimum number replicates required share sRNA sequence count match. example, set match.threshold=3, least 3 replicates must contain sequence. general rule, one replicate determined sRNA sequence noted match, sequence pulled complementary sequences calculated. match column can either return \"Yes\", \"\" \"Duplicate\". match replicates found, \"Yes\" supplied, , \"\". tie sequences \"Duplicate\" supplied. examples, equal number replicates sequence \"x\" sequence \"y\". situation duplicates identified, default, random consensus sRNA sequence selected. parameter can changed \"exclude\", parameter consensus sequence pulled.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract sRNA cluster sequences — RNAsequences","text":"","code":"data('sRNA_data_mobile')  mobile_sequences <- RNAsequences(sRNA_data_mobile) #> The minimum number of matches required to form a consensus sRNA sequence is... 1 #> The consensus sRNA sequences will be choose at random in the case of a tie #>"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsignificant.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract statistically significant sRNA clusters within a population. — RNAsignificant","title":"Extract statistically significant sRNA clusters within a population. — RNAsignificant","text":"sRNA clusters abundant, show statistically significant logfc.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsignificant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract statistically significant sRNA clusters within a population. — RNAsignificant","text":"","code":"RNAsignificant(   data,   statistical = FALSE,   padj = 0.05,   p.value = NULL,   chimeric = FALSE,   controls = NULL,   genome.ID = NULL )"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsignificant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract statistically significant sRNA clusters within a population. — RNAsignificant","text":"data Numeric data frame statistical TRUE, undertake statistical filtering based p-value adjusted p-value threshold stated padj & p.value.Default set FALSE. Requires presence columns containing statistical data. order filter adjusted p-value, column named padjusted must present. Similarly, filter p-value, column named pvalue must present. See RNAanalysis() calculate statistical values. padj user defined numeric value represent adjusted p-value threshold define statistic significance. Defaults set 0.05.mobile molecules adjusted p-values equal lower specified returned. p.value user defined numeric value represent p-value threshold define statistic significance. default value, set instead using adjusted p-value filter molecules. mobile molecules p-values equal lower specified returned. chimeric logical; state whether system chimeric: contains multiple genomes/genotypes. controls character; vector control condition sample names. genome.ID character; chromosome identifier foreign genome chimeric system","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsignificant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract statistically significant sRNA clusters within a population. — RNAsignificant","text":"refined version working dataframe supplied function. function selects sRNA clusters meet statistical threshold, given statistical analysis undertaken using RNAanalysis() function.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsignificant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract statistically significant sRNA clusters within a population. — RNAsignificant","text":"Filters data based statistical significance calculated RNAanalysis() function. optional features enables user select sRNA clusters meet specific p-value adjusted p-values threshold. Requires either columns: pvalue, padjusted undertake. working chimeric system, example interspecific grafting, mapping errors can easily recognised eliminated. , can eliminated supplying extra parameter information. State chimeric=TRUE supply chromosome identifier foreign genome (ie. tissue sample genotype, genotype potential mobile molecules traveling ) genome.ID parameter & control condition samples names controls parameter.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsignificant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract statistically significant sRNA clusters within a population. — RNAsignificant","text":"","code":"data(\"sRNA_data_consensus\")  ## sample conditions in order within dataframe groups <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",             \"Selfgraft\", \"Selfgraft\", \"Selfgraft\")   ## Differential analysis using the DEseq2 method  sRNA_DESeq2 <- RNAanalysis(data = sRNA_data_consensus,                           group = groups,                           method = \"DESeq2\") #> using pre-existing size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing                             ## Select significant based on padjusted                         significant_sRNAs <- RNAsignificant(sRNA_DESeq2, chimeric = TRUE,                                      genome.ID = \"SL\",                                      controls = c(\"selfgraft_1\", \"selfgraft_2\",                                      \"selfgraft_3\"))"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsubset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset data to select a specific small RNA population — RNAsubset","title":"Subset data to select a specific small RNA population — RNAsubset","text":"Creates data-frame containing desired sRNA class(s) based consensus sRNA determination.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsubset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset data to select a specific small RNA population — RNAsubset","text":"","code":"RNAsubset(data, type, sig = FALSE, ...)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsubset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset data to select a specific small RNA population — RNAsubset","text":"data numerical data-frame containing sample data, defined consensus sRNA class/type sRNA dicer-derived cluster (see RNAdicercall(). type number represent type small RNA population subset . sig Parameter filter select significant sRNA. sig=TRUE, data filtered based p-adjusted < 0.05 significance threshold. ... Related number type argument can value 20-24. select, 24-nt sRNA, state 24. Multiple values can inputted, instance 21 22 can stated select .","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsubset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset data to select a specific small RNA population — RNAsubset","text":"dataframe containing sRNA clusters sRNA consensus matching size instructed type argument.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsubset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset data to select a specific small RNA population — RNAsubset","text":"See RNAdicercall() information defining sRNA type cluster. function allows choice filtered data statistical significance based differential expression analysis, see RNAanalysis(). Set sig=TRUE filtered significance (p-adjusted). important consider point analysis subset data /undertake differential analysis achieve statistical values. Subsetting dataset groups based sRNA class create smaller set data draw statistical differences. Depending size data, analysis aims taken consideration.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/RNAsubset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset data to select a specific small RNA population — RNAsubset","text":"","code":"data(\"sRNA_data_consensus\")  # Subset data for  24-nt sRNAs sRNA_24 <- RNAsubset(sRNA_data_consensus, type = 24)   # Subset data for 24 21/22-nt sRNAs sRNA_2122 <- RNAsubset(sRNA_data_consensus, type = c(21, 22))  # You can subset by any combination of classes. For example, a dataset # of 23-nt & 24-nt sRNAs or just 20-nt sRNAs."},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1.fa.gz.html","id":null,"dir":"Reference","previous_headings":"","what":"chr12_Eggplant_V4.1.fa.gz — chr12_Eggplant_V4.1.fa.gz","title":"chr12_Eggplant_V4.1.fa.gz — chr12_Eggplant_V4.1.fa.gz","text":"Simulated sRNAseq dataset - potentially mobile RNAs Chromosome 12 genome assembly Solanium melongena Version 4.1","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1.fa.gz.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"chr12_Eggplant_V4.1.fa.gz — chr12_Eggplant_V4.1.fa.gz","text":"FASTA gzip","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1.fa.gz.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"chr12_Eggplant_V4.1.fa.gz — chr12_Eggplant_V4.1.fa.gz","text":"Barchi, L., Rabanus‐Wallace, M. T., Prohens, J., Toppino, L., Padmarasu, S., Portis, E., ... & Giuliano, G. (2021). Improved genome assembly pan‐genome provide key insights eggplant domestication breeding. Plant Journal, 107(2), 579-596.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1.fa.gz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"chr12_Eggplant_V4.1.fa.gz — chr12_Eggplant_V4.1.fa.gz","text":"Simulates data taken eggplant tomato sRNAseq samples created simulate movement sRNA molecules Tomato rootstock Eggplant Scion. Three Eggplant replicates spiked 150 tomato sRNA clusters, named \"heterograft_\" 1 3. analysis compares heterografts three Eggplant self-grafts original un-spiked Eggplant replicates.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1.fa.gz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"chr12_Eggplant_V4.1.fa.gz — chr12_Eggplant_V4.1.fa.gz","text":"https://solgenomics.net/organism/Solanum_melongena/genome","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1.fa.gz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"chr12_Eggplant_V4.1.fa.gz — chr12_Eggplant_V4.1.fa.gz","text":"","code":"system.file(\"extdata\",\"chr12_Eggplant_V4.1.fa.gz\", package=\"mobileRNA\") #> [1] \"\" system.file(\"extdata\", \"chr12_Eggplant_V4.1.fa.gz\", package=\"mobileRNA\") #> [1] \"\""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1_function_IPR_final.gff.gz.html","id":null,"dir":"Reference","previous_headings":"","what":"chr12_Eggplant_V4.1_function_IPR_final.gff.gz — chr12_Eggplant_V4.1_function_IPR_final.gff.gz","title":"chr12_Eggplant_V4.1_function_IPR_final.gff.gz — chr12_Eggplant_V4.1_function_IPR_final.gff.gz","text":"Chromosome 12 genome annotation Solanium melongena Version 4.1","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1_function_IPR_final.gff.gz.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"chr12_Eggplant_V4.1_function_IPR_final.gff.gz — chr12_Eggplant_V4.1_function_IPR_final.gff.gz","text":"GFF gzip","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1_function_IPR_final.gff.gz.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"chr12_Eggplant_V4.1_function_IPR_final.gff.gz — chr12_Eggplant_V4.1_function_IPR_final.gff.gz","text":"Barchi, L., Rabanus‐Wallace, M. T., Prohens, J., Toppino, L., Padmarasu, S., Portis, E., ... & Giuliano, G. (2021). Improved genome assembly pan‐genome provide key insights eggplant domestication breeding. Plant Journal, 107(2), 579-596.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1_function_IPR_final.gff.gz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"chr12_Eggplant_V4.1_function_IPR_final.gff.gz — chr12_Eggplant_V4.1_function_IPR_final.gff.gz","text":"https://solgenomics.net/organism/Solanum_melongena/genome","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr12_Eggplant_V4.1_function_IPR_final.gff.gz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"chr12_Eggplant_V4.1_function_IPR_final.gff.gz — chr12_Eggplant_V4.1_function_IPR_final.gff.gz","text":"","code":"system.file(\"extdata\", \"chr12_Eggplant_V4.1_function_IPR_final.gff.gz\", package=\"mobileRNA\") #> [1] \"\""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr2_ITAG4.0_gene_models.gff.gz.html","id":null,"dir":"Reference","previous_headings":"","what":"chr2_ITAG4.0_gene_models.gff.gz — chr2_ITAG4.0_gene_models.gff.gz","title":"chr2_ITAG4.0_gene_models.gff.gz — chr2_ITAG4.0_gene_models.gff.gz","text":"Chromosome 2 genome annotation Solanium lycopersicum (Heinz) Version SL4.0","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr2_ITAG4.0_gene_models.gff.gz.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"chr2_ITAG4.0_gene_models.gff.gz — chr2_ITAG4.0_gene_models.gff.gz","text":"GFF gzip","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr2_ITAG4.0_gene_models.gff.gz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"chr2_ITAG4.0_gene_models.gff.gz — chr2_ITAG4.0_gene_models.gff.gz","text":"https://solgenomics.net/organism/Solanum_lycopersicum/genome","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr2_ITAG4.0_gene_models.gff.gz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"chr2_ITAG4.0_gene_models.gff.gz — chr2_ITAG4.0_gene_models.gff.gz","text":"","code":"system.file(\"extdata\", \"chr2_ITAG4.0_gene_models.gff.gz\", package=\"mobileRNA\") #> [1] \"\""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr2_S_lycopersicum_chromosomes.4.00.fa.gz.html","id":null,"dir":"Reference","previous_headings":"","what":"chr2_S_lycopersicum_chromosomes.4.00.fa.gz — chr2_S_lycopersicum_chromosomes.4.00.fa.gz","title":"chr2_S_lycopersicum_chromosomes.4.00.fa.gz — chr2_S_lycopersicum_chromosomes.4.00.fa.gz","text":"Chromosome 2 genome assembly Solanium lycopersicum (Heinz) Version SL4.0","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr2_S_lycopersicum_chromosomes.4.00.fa.gz.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"chr2_S_lycopersicum_chromosomes.4.00.fa.gz — chr2_S_lycopersicum_chromosomes.4.00.fa.gz","text":"FASTA gzip","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr2_S_lycopersicum_chromosomes.4.00.fa.gz.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"chr2_S_lycopersicum_chromosomes.4.00.fa.gz — chr2_S_lycopersicum_chromosomes.4.00.fa.gz","text":"Hosmani, P. S., Flores-Gonzalez, M., van de Geest, H., Maumus, F., Bakker, L. V., Schijlen, E., ... & Saha, S. (2019). improved de novo assembly annotation tomato reference genome using single-molecule sequencing, Hi-C proximity ligation optical maps. biorxiv, 767764.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr2_S_lycopersicum_chromosomes.4.00.fa.gz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"chr2_S_lycopersicum_chromosomes.4.00.fa.gz — chr2_S_lycopersicum_chromosomes.4.00.fa.gz","text":"https://solgenomics.net/organism/Solanum_lycopersicum/genome","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/chr2_S_lycopersicum_chromosomes.4.00.fa.gz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"chr2_S_lycopersicum_chromosomes.4.00.fa.gz — chr2_S_lycopersicum_chromosomes.4.00.fa.gz","text":"","code":"system.file(\"extdata\", \"chr2_S_lycopersicum_chromosomes.4.00.fa.gz\", package=\"mobileRNA\") #> [1] \"\""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap using hierarchical clustering — plotHeatmap","title":"Heatmap using hierarchical clustering — plotHeatmap","text":"Plots heatmap hierarchical clustering via rlog transformation RPM data euclidean statistics.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap using hierarchical clustering — plotHeatmap","text":"","code":"plotHeatmap(data, colours = NULL, dendogram = TRUE, cellheight = NULL)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap using hierarchical clustering — plotHeatmap","text":"data Data frame containing FPKM values samples sRNA dicer-derived cluster interest. colours Colours display represent heatmap. Defaults grDevices::heat.colors() (heat.colors(100)). dendogram Logical; indicating whether include dendrogram clustering, retain clustering. Default, dendogram = TRUE include. cellheight individual cell height points. left NA, values depend size plotting window.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap using hierarchical clustering — plotHeatmap","text":"Produces list objects, including plot.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotHeatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmap using hierarchical clustering — plotHeatmap","text":"function create heatmap based hierarchical clustering FPKM values using euclidean statistics.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap using hierarchical clustering — plotHeatmap","text":"","code":"data(\"sRNA_data_mobile\")  # plot heatmap of potential mobile sRNAs  p1 <-  plotHeatmap(sRNA_data_mobile)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSampleDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample quality control heatmap plot — plotSampleDistance","title":"Sample quality control heatmap plot — plotSampleDistance","text":"function draw simple hierarchical clustered heatmap observe sample distance. Ideal quality control sequencing data.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSampleDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample quality control heatmap plot — plotSampleDistance","text":"","code":"plotSampleDistance(data, vst = FALSE)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSampleDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample quality control heatmap plot — plotSampleDistance","text":"data data frame; data set containing raw data produced output RNAdicercall() /RNAsubset() vst Logical; Variance stabilizing transformation. default, function uses regularized log transformation data set, however, suit experimental designs.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSampleDistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample quality control heatmap plot — plotSampleDistance","text":"blue scale heatmap illustrating sample distance.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSampleDistance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample quality control heatmap plot — plotSampleDistance","text":"special conditions, regularized log transformation suit experimental design. example, experimental design without replicates. instance, preferable change default setting switch variance stabilizing transformation method (vst=TRUE).","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSampleDistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample quality control heatmap plot — plotSampleDistance","text":"","code":"data(\"sRNA_data_consensus\") plotSampleDistance(sRNA_data_consensus) #> Checking data #> Transforming the count data to the log2 scale #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. #> Calculating distance matrix #> Creating sample distance plot"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSamplePCA.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA plot to illustrate sample distance. — plotSamplePCA","title":"PCA plot to illustrate sample distance. — plotSamplePCA","text":"function draw principal component analysis (PCA) plot. function undertakes rlog transformation data unbiased manner (blind=TRUE).","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSamplePCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA plot to illustrate sample distance. — plotSamplePCA","text":"","code":"plotSamplePCA(data, group, vst = FALSE)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSamplePCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA plot to illustrate sample distance. — plotSamplePCA","text":"data class data.frame; data set containing raw data produced output RNAdicercall() /RNAsubset(). group character vector; contains experimental conditions replicate. IMPORTANT: Ensure order replicates found data frame supplied data argument (left right). vst logical; Variance stabilizing transformation. default, function uses regularized log transformation data set, however, suit experimental designs.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSamplePCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA plot to illustrate sample distance. — plotSamplePCA","text":"PCA plot show sample distance.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSamplePCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PCA plot to illustrate sample distance. — plotSamplePCA","text":"function utilises DESeq2 package organise plot data. organises data DESeqDataSet undergoes log transformation results used undertake PCA analysis. results plotted principle components 1 2. special conditions, regularized log transformation suit experimental design. example, experimental design without replicates. instance, preferable change default setting switch variance stabilizing transformation method (`vst=TRUE`).","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/plotSamplePCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA plot to illustrate sample distance. — plotSamplePCA","text":"","code":"data(\"sRNA_data_consensus\")  groups <- c(\"Heterograft\", \"Heterograft\", \"Heterograft\",             \"Selfgraft\", \"Selfgraft\", \"Selfgraft\") p <-  plotSamplePCA(data = sRNA_data_consensus,group = groups ) #> Checking and organising data #> Transforming the count data to the log2 scale #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. #> Organising principal component analysis"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data.html","id":null,"dir":"Reference","previous_headings":"","what":"The sRNA_data data set — sRNA_data","title":"The sRNA_data data set — sRNA_data","text":"Simulated sRNAseq dataset","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The sRNA_data data set — sRNA_data","text":"","code":"data(sRNA_data)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The sRNA_data data set — sRNA_data","text":"data sets represents results pre-processing. data organised using sample_table function. Tomato (Solanium lycopersicum) eggplant (Solanium melongena) used grafting partners hetero-grafting experiment. scion represented tomato rootstock represented eggplant. experiment used tomato self-graft control. dataset holds three replicates hetero-graft treatment (TomEgg_1, TomEgg_2, TomEgg_3) three replicates self-graft control (TomTom_1, TomTom_2, TomTom_3). sRNA_data Simulates data taken eggplant tomato sRNAseq samples created simulate movement sRNA molecules Tomato rootstock Eggplant Scion. Three Eggplant replicates spiked 150 tomato sRNA clusters, named \"heterograft_\" 1 3. analysis compares heterografts three Eggplant self-grafts original un-spiked Eggplant replicates. @examples data(\"sRNA_data\")","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"sRNA_data_consensus — sRNA_data_consensus","title":"sRNA_data_consensus — sRNA_data_consensus","text":"Simulated sRNAseq dataset RNA consensus","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sRNA_data_consensus — sRNA_data_consensus","text":"","code":"data(sRNA_data_consensus)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data_consensus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sRNA_data_consensus — sRNA_data_consensus","text":"Simulates data taken eggplant tomato sRNAseq samples created simulate movement sRNA molecules Tomato rootstock Eggplant Scion. Three Eggplant replicates spiked 150 tomato sRNA clusters, named \"heterograft_\" 1 3. analysis compares heterografts three Eggplant self-grafts original un-spiked Eggplant replicates.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sRNA_data_consensus — sRNA_data_consensus","text":"","code":"data(\"sRNA_data_consensus\")"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data_mobile.html","id":null,"dir":"Reference","previous_headings":"","what":"sRNA_data_mobile — sRNA_data_mobile","title":"sRNA_data_mobile — sRNA_data_mobile","text":"Simulated sRNAseq dataset - potentially mobile RNAs","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data_mobile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sRNA_data_mobile — sRNA_data_mobile","text":"","code":"data(sRNA_data_mobile)"},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data_mobile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sRNA_data_mobile — sRNA_data_mobile","text":"Simulates data taken eggplant tomato sRNAseq samples created simulate movement sRNA molecules Tomato rootstock Eggplant Scion. Three Eggplant replicates spiked 150 tomato sRNA clusters, named \"heterograft_\" 1 3. analysis compares heterografts three Eggplant self-grafts original un-spiked Eggplant replicates.","code":""},{"path":"https://kjeynescupper.github.io/mobileRNA/reference/sRNA_data_mobile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sRNA_data_mobile — sRNA_data_mobile","text":"","code":"data(\"sRNA_data_mobile\")"}]
